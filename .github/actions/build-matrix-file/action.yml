name: Build matrix.json
description: Build matrix.json from current checkout
runs:
  using: composite
  steps:
    - name: Build matrix
      run: |
        echo [] > ./matrix.json

        for path in $(cat ./package.json | jq -cr '.workspaces | .[]')
        do
          echo ::group::$path

          cat ./$path/package.json

          cat ./matrix.json | jq \
            --arg path "$path" \
            --argfile packageJSON ./$path/package.json \
            -r \
            '. + [{ name: $packageJSON.name, path: $path, private: ($packageJSON.private // false), tarball: ($packageJSON.name + "-" + $packageJSON.version + ".tgz"), version: $packageJSON.version }]' \
            > ./matrix.json.tmp

          mv ./matrix.json.tmp ./matrix.json

          echo ::endgroup::
        done

        cat ./matrix.json
      shell: bash
    - name: 'Sanity check: matrix should list all workspaces'
      run: |
        cat ./matrix.json | jq \
          --argfile packageJSON ./package.json \
          'if (. | map(.path)) == ($packageJSON.workspaces) then empty else halt_error(1) end'
      shell: bash
    - name: 'Sanity check: all entries must have "name" field'
      run: cat ./matrix.json | jq 'if map(select(.name | not)) | length == 0 then empty else halt_error(1) end'
      shell: bash
    - name: 'Sanity check: all entries must have "path" field'
      run: cat ./matrix.json | jq 'if map(select(.path | not)) | length == 0 then empty else halt_error(1) end'
      shell: bash
    - name: 'Sanity check: all entries must have "tarball" field'
      run: cat ./matrix.json | jq 'if map(select(.tarball | not)) | length == 0 then empty else halt_error(1) end'
      shell: bash
    - name: 'Sanity check: all entries must have "version" field'
      run: cat ./matrix.json | jq 'if map(select(.version | not)) | length == 0 then empty else halt_error(1) end'
      shell: bash
    - name: 'Sanity check: at least one entry marked as non-private'
      run: cat ./matrix.json | jq 'if map(select(.private | not)) | length > 0 then empty else halt_error(1) end'
      shell: bash

name: Reinstall local packages
inputs:
  overrides:
    description: Name of local packages and their specific version to install. Separate each package with a new line.
    required: false
  stage:
    default: true
    description: Stage modified package.json
    type: boolean

runs:
  using: composite

  steps:
    - id: version-overrides
      name: Build version overrides plan
      run: |
        echo ::group::Build version overrides plan

        json={}

        for spec in $(echo '${{ toJSON(inputs.overrides) }}' | jq -r)
        do
          if [[ $spec == '@'* ]]
          then
            name=$(echo $spec | awk -F@ '{ print $2 }')
            version=$(echo $spec | awk -F@ '{ print $3 }')
          else
            name=$(echo $spec | awk -F@ '{ print $1 }')
            version=$(echo $spec | awk -F@ '{ print $2 }')
          fi

          echo name=$name
          echo version=$version

          json=$(
            echo $json | \
              jq \
                --arg name $name \
                --arg version $version \
                -cr \
                '.[$name] = $version'
          )

          echo $json | jq -r
          echo
        done

        # Example:
        # {
        #   "powerva-turn-based-chat-adapter-framework": "0.0.0"
        # }
        echo json=$json | tee --append $GITHUB_OUTPUT

        echo ::endgroup::
      shell: bash

    - id: install-plan
      name: Build install plan
      run: |
        echo ::group::Build install plan

        json={}

        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')
          echo name=$name

          override_version=$(echo ${{ steps.version-overrides.outputs.json }} | jq --arg name $name -r '.[$name]')
          echo override_version=$override_version

          [[ -z "$override_version" ]] && package_spec=$name || package_spec=$name@$override_version
          echo package_spec=$package_spec

          # npm query ":attr(dependencies, [powerva-chat-adapter])" | jq -cr 'map(.name)'
          dependents=$(echo \":attr\(dependencies, [$name]\)\" | xargs npm query | jq -cr 'map(.name)')
          echo dependents=$dependents

          # npm query ":attr(devDependencies, [powerva-chat-adapter])" | jq -cr 'map(.name)'
          dev_dependents=$(echo \":attr\(devDependencies, [$name]\)\" | xargs npm query | jq -cr 'map(.name)')
          echo dev_dependents=$dev_dependents

          json=$(
            echo $json | \
              jq \
                --arg name $name \
                --arg packageSpec $package_spec \
                --argjson dependents $dependents \
                --argjson devDependents $dev_dependents \
                -cr \
                '.[$name] = { dependents: $dependents, devDependents: $devDependents, packageSpec: $packageSpec }' \
          )

          echo $json | jq -r
          echo
        done

        # Example:
        # {
        #   "powerva-chat-adapter-test-util": {
        #     "dependents": [],
        #     "devDependents": [
        #       "powerva-turn-based-chat-adapter-framework",
        #       "powerva-chat-adapter"
        #     ],
        #     "packageSpec": "powerva-chat-adapter-test-util@0.0.1"
        #   },
        #   "powerva-turn-based-chat-adapter-framework": {
        #     "dependents": [
        #       "powerva-chat-adapter"
        #     ],
        #     "devDependents": [],
        #     "packageSpec": "powerva-turn-based-chat-adapter-framework",
        #   },
        #   "powerva-chat-adapter": {
        #     "dependents": [
        #       "pages"
        #     ],
        #     "devDependents": [],
        #     "packageSpec": "powerva-chat-adapter@0.0.1"
        #   },
        #   "pages": {
        #     "dependents": [],
        #     "devDependents": [],
        #     "packageSpec": "pages"
        #   }
        # }

        echo json=$json | tee --append $GITHUB_OUTPUT

        echo ::endgroup::
      shell: bash

    - name: Uninstall all local packages
      run: |
        echo ::group::Uninstall all local packages

        # Uninstall all local packages before installing newer version. We must uninstall all at once.
        # If we have 2+ packages that are not published, `npm install` one of them will say the other one is not found.

        # Example: local_names="powerva-chat-adapter-test-util powerva-turn-based-chat-adapter-framework powerva-chat-adapter pages"
        local_names=$(echo ${{ steps.install-plan.outputs.json }} | jq -r '. | keys | join(" ")')
        echo local_names=$local_names

        echo npm uninstall $local_names --workspaces
        npm uninstall $local_names --workspaces

        echo ::endgroup::
      shell: bash

    - name: Reinstall all local packages
      run: |
        echo ::group::Reinstall all local packages

        # Reinstall dependencies with newer version according to the order in package.json/workspaces.
        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')
          package_spec=$(echo ${{ steps.install-plan.outputs.json }} | jq --arg name $name -r '.[$name].packageSpec')

          # "package_spec" must exists in the install plan.
          [[ ! -z "$package_spec" ]]

          # Example: "--workspace=pages --workspace=powerva-chat-adapter"
          local_prod_packages=$(echo ${{ steps.install-plan.outputs.json }} | jq --arg name $name -r '.[$name].dependents | map("--workspace=" + .) | join(" ")')

          # Install the package if there are any dependents.
          if [[ ! -z "$local_prod_packages" ]]
          then
            echo npm install $package_spec --save $local_prod_packages

            npm install \
              --ignore-scripts \
              --no-audit \
              --package-lock-only \
              --save \
              $local_prod_packages \
              $package_spec
          fi

          # Example: "--workspace=pages --workspace=powerva-chat-adapter"
          local_dev_packages=$(echo $all_dependents | jq --arg name $name -r '.[$name].devDependents | map("--workspace=" + .) | join(" ")')

          # Install the package if there are any dependents.
          if [[ ! -z "$local_dev_packages" ]]
          then
            echo npm install --save-dev $local_dev_packages $package_spec

            npm install \
              --ignore-scripts \
              --no-audit \
              --package-lock-only \
              --save-dev \
              $local_dev_packages \
              $package_spec
          fi
        done

        echo ::endgroup::
      shell: bash

    - if: inputs.stage
      name: Stage package.json
      run: |
        echo ::group::Stage package.json

        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          git add $path/package.json
        done

        echo ::endgroup::
      shell: bash

    - if: inputs.stage
      name: Stage package-lock.json
      run: |
        echo ::group::Stage package-loc.json

        git add package-lock.json

        echo ::endgroup::
      shell: bash

    - run: exit 1
      shell: bash

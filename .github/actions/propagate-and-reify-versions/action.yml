name: Propagate and reify versions
description:
inputs:
  stage:
    default: true
    description: Stage modified package.json
    type: boolean
  prefer-production-version:
    default: true
    description: Prefer production version from NPM
    type: boolean
  version-range-modifier:
    default: '^'
    description: Version range modifier
    required: true
    type: string

runs:
  using: composite
  steps:
    # For unknown reasons, NPM can't update other packages in the workspace and will say the previous version was not found.

    # Running "npm version" will run subsequent "npm update".
    # If running "npm update" on a package with dependency which do not have version on NPM but local workspace, it will fail.

    # Repro:
    #   1. Run "npm version prepatch --workspace=powerva-chat-adapter"
    #   2. Do step 1 again
    # Expect: it should not fail and will update pages/package.json to the version bumped in step 2.
    # Actual: it fail saying powerva-chat-adapter@0.0.2-0 does not exists.

    # - run: |
    #     for path in $(cat ./package.json | jq -r '.workspaces[]')
    #     do
    #       name=$(cat $path/package.json | jq -r '.name')
    #       committed_version=$(cat $path/package.json | jq -r '.version')

    #       if [[ $committed_version == *'-'* ]]
    #       then
    #         if [[ "${{ inputs.prefer-production-version }}" == "true" ]]
    #         then
    #           echo Getting version number from NPM for package $name.

    #           version=$(npm view $name --json | jq -r '.version')

    #           echo $name@$committed_version -> $name@$version: Package is a prerelease package, using version number from NPM instead.
    #         else
    #           version=$committed_version

    #           echo $name@$version: Package is a prerelease package in the workspace.
    #         fi
    #       else
    #         version=$committed_version

    #         echo $name@$version: Package is a production package.
    #       fi

    #       for dependent_path in $(cat ./package.json | jq -r '.workspaces[]')
    #       do
    #         dependent_name=$(cat $dependent_path/package.json | jq -r '.name')

    #         if [[ "$(cat $dependent_path/package.json | jq --arg name "$name" -r 'if (.dependencies + .devDependencies)[$name] then true else false end')" == "true" ]]
    #         then
    #           echo npm install --workspace=$dependent_name $name@${{ inputs.version-range-modifier }}$version

    #           npm uninstall \
    #             --ignore-scripts \
    #             --no-audit \
    #             --package-lock-only \
    #             --prefer-dedupe \
    #             --workspace=$dependent_name \
    #             $name

    #           npm install \
    #             --ignore-scripts \
    #             --no-audit \
    #             --package-lock-only \
    #             --prefer-dedupe \
    #             --workspace=$dependent_name \
    #             $name@${{ inputs.version-range-modifier }}$version

    #           # npm update \
    #           #   --ignore-scripts \
    #           #   --no-audit \
    #           #   --save \
    #           #   --workspace=$dependent_name \
    #           #   $name
    #         fi
    #       done
    #     done
    #   shell: bash

    # - id: version
    #   run: |
    #     output={}

    #     for path in $(cat ./package.json | jq -r '.workspaces[]')
    #     do
    #       name=$(cat $path/package.json | jq -r '.name')
    #       committed_version=$(cat $path/package.json | jq -r '.version')

    #       if [[ $committed_version == *'-'* ]]
    #       then
    #         if [[ "${{ inputs.prefer-production-version }}" == "true" ]]
    #         then
    #           echo Getting version number from NPM for package $name.

    #           version=$(npm view $name --json | jq -r '.version')

    #           echo $name@$committed_version -> $name@$version: Package is a prerelease package, using version number from NPM instead.
    #         else
    #           version=$committed_version

    #           echo $name@$version: Package is a prerelease package in the workspace.
    #         fi
    #       else
    #         version=$committed_version

    #         echo $name@$version: Package is a production package.
    #       fi

    #       output=$(echo $output | jq --arg name "$name" --arg version "$version" -cr '.[$name] = $version')
    #     done

    #     echo $output | jq -r

    #     for path in $(cat ./package.json | jq -r '.workspaces[]')
    #     do
    #       name=$(cat $path/package.json | jq -r '.name')

    #       # Example: "powerva-chat-adapter@0.0.1-0 powerva-chat-adapter-test-util@0.0.1-0"
    #       workspace_dependencies=$(cat $path/package.json | \
    #         jq \
    #           --argjson version $output \
    #           -r \
    #           '
    #             (.dependencies + .devDependencies)
    #               | to_entries
    #               | map(
    #                   if $version[.key] then
    #                     .key + "@" + $version[.key]
    #                   else
    #                     empty
    #                   end
    #                 )
    #               | join(" ")
    #           ')

    #       echo name=$name
    #       echo workspace_dependencies=$workspace_dependencies

    #       if [[ ! -z $workspace_dependencies ]]
    #       then
    #         npm install \
    #           --ignore-scripts \
    #           --no-audit \
    #           --package-lock-only \
    #           --prefer-dedupe \
    #           --workspace=$name \
    #           $workspace_dependencies
    #       fi
    #     done
    #   shell: bash

    - run: |
        version_map={}

        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')
          committed_version=$(cat $path/package.json | jq -r '.version')

          if [[ $committed_version == *'-'* ]]
          then
            if [[ "${{ inputs.prefer-production-version }}" == "true" ]]
            then
              echo Getting version number from NPM for package $name.

              version=$(npm view $name --json | jq -r '.version')

              echo $name@$committed_version -> $name@$version: Package is a prerelease package, using version number from NPM instead.
            else
              version=$committed_version

              echo $name@$version: Package is a prerelease package in the workspace.
            fi
          else
            version=$committed_version

            echo $name@$version: Package is a production package.
          fi

          version_map=$(echo $version_map | jq --arg name "$name" --arg version "$version" -cr '.[$name] = $version')
        done

        # Example:
        # {
        #   "powerva-chat-adapter-test-util": "0.0.1",
        #   "powerva-turn-based-chat-adapter-framework": "0.0.0",
        #   "powerva-chat-adapter": "0.0.1",
        #   "pages": "0.0.16"
        # }
        echo $version_map | jq -r

        all_dependents={}

        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')

          # Find out who depends on this package.

          dependents='{"dependencies":[],"devDependencies":[]}'

          for path in $(cat ./package.json | jq -r '.workspaces[]')
          do
            dependent_name=$(cat $path/package.json | jq -r '.name')

            appears_in_dependencies=$(cat $path/package.json | jq --arg name $name --argjson version $version_map -r '.dependencies[$name] and true')

            appears_in_dev_dependencies=$(cat $path/package.json | jq --arg name $name --argjson version $version_map -r '.devDependencies[$name] and true')

            if [[ "$appears_in_dependencies" == "true" ]]
            then
              dependents=$(echo $dependents | jq --arg name $dependent_name -cr '.dependencies += [$name]')
            elif [[ "$appears_in_dev_dependencies" == "true" ]]
              dependents=$(echo $dependents | jq --arg name $dependent_name -cr '.devDependencies += [$name]')
            fi
          done

          echo Dependents of $name: $dependents.

          all_dependents=$(echo $all_dependents | jq --argjson dependents $dependents --arg name $name -cr '.[$name] = $dependents')
        done

        # Example:
        echo $all_dependents | jq -r

        # Uninstall all local packages before installing newer version. We must uninstall all at once.
        # If we have 2+ packages that are not published, `npm install` one of them will say the other one is not found.
        uninstall_name=$(echo $version_map | jq -r '. | keys | join(" ")')

        echo npm uninstall $uninstall_name --workspaces
        npm uninstall $uninstall_name --workspaces

        # Reinstall dependencies with newer version.
        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')
          version=$(echo $version_map | jq --arg name $name -r '.[$name]')

          # Example: "--workspace=pages --workspace=powerva-chat-adapter"
          local_prod_packages=$(echo $all_dependents | jq --arg name $name -r '.[$name].dependencies | map("--workspace=" + .) | join(" ")')

          # Install the package if there are any dependents
          if [[ ! -z "$local_prod_packages" ]]
          then
            echo npm install $local_prod_packages $name@$version

            npm install \
              --ignore-scripts \
              --no-audit \
              --package-lock-only \
              $local_prod_packages \
              $name@$version
          fi

          # Example: "--workspace=pages --workspace=powerva-chat-adapter"
          local_dev_packages=$(echo $all_dependents | jq --arg name $name -r '.[$name].devDependencies | map("--workspace=" + .) | join(" ")')

          # Install the package if there are any dependents
          if [[ ! -z "$local_dev_packages" ]]
          then
            echo npm install $local_dev_packages $name@$version

            npm install \
              --ignore-scripts \
              --no-audit \
              --package-lock-only \
              $local_dev_packages \
              $name@$version
          fi
        done
      shell: bash

    - name: Print package.json
      run: |
        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')

          echo ::group::$name
          cat $path/package.json | jq -r '{ name: .name, version: .version, dependencies: .dependencies, devDependencies: .devDependencies }'
          echo ::endgroup::
        done
      shell: bash

    - if: inputs.stage
      name: Stage package.json
      run: |
        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          git add $path/package.json
        done
      shell: bash

    - if: inputs.stage
      name: Stage package-lock.json
      run: git add package-lock.json
      shell: bash

# This action assumes local packages have their version changed.
# When running this action, the version number of local packages will propagate to their depending local packages.

name: Propagate and reify versions
description:
inputs:
  stage:
    default: true
    description: Stage modified package.json
    type: boolean
  # If we are preparing packages for production (publish to NPMJS), we must use non-prerelease version in all packages. We may need to go to NPMJS to grab latest version.
  # If we are preparing packages for development (put back to GitHub), we should put prerelease in all packages.
  prefer-production-version:
    default: true
    description: Prefer production version from NPM
    type: boolean
  version-range-modifier:
    default: '^'
    description: Version range modifier
    required: true
    type: string

runs:
  using: composite
  steps:
    # Running "npm version" will run subsequent "npm update".
    # If running "npm update" on a package with dependency which do not have version on NPM but local workspace, it will fail.

    # Repro:
    #   1. Run "npm version prepatch --workspace=powerva-chat-adapter"
    #   2. Do step 1 again
    # Expect: it should not fail and will update pages/package.json to the version bumped in step 2.
    # Actual: it fail saying powerva-chat-adapter@0.0.2-0 does not exists.

    - run: |
        version_map={}

        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')
          committed_version=$(cat $path/package.json | jq -r '.version')

          if [[ $committed_version == *'-'* ]]
          then
            if [[ "${{ inputs.prefer-production-version }}" == "true" ]]
            then
              echo Getting version number from NPM for package $name.

              version=$(npm view $name --json | jq -r '.version')

              echo $name@$committed_version -> $name@$version: Package is a prerelease package, using version number from NPM instead.
            else
              version=$committed_version

              echo $name@$version: Package is a prerelease package in the workspace.
            fi
          else
            version=$committed_version

            echo $name@$version: Package is a production package.
          fi

          version_map=$(echo $version_map | jq --arg name "$name" --arg version "$version" -cr '.[$name] = $version')
        done

        # This is the versions we want to propagate out to other local packages.
        # If "prefer production version" is set, they may include versions from NPMJS registry, instead of local packages.

        # Example:
        # {
        #   "powerva-chat-adapter-test-util": "0.0.1",
        #   "powerva-turn-based-chat-adapter-framework": "0.0.0",
        #   "powerva-chat-adapter": "0.0.1",
        #   "pages": "0.0.16"
        # }
        echo $version_map | jq -r

        all_dependents={}

        # Find out which local packages directly depends on this package, group them into "dependencies" and "devDependencies".

        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')

          # npm query ":attr(dependencies, [powerva-chat-adapter])" | jq -cr 'map(.name)'
          dependents=$(echo \":attr\(dependencies, [$name]\)\" | xargs npm query | jq -cr 'map(.name)')

          # npm query ":attr(devDependencies, [powerva-chat-adapter])" | jq -cr 'map(.name)'
          dev_dependents=$(echo \":attr\(devDependencies, [$name]\)\" | xargs npm query | jq -cr 'map(.name)')

          all_dependents=$(
            echo $all_dependents | \
              jq \
                --arg name $name \
                --argjson dependents $dependents \
                --argjson devDependents $dev_dependents \
                -cr \
                '.[$name] = { dependents: $dependents, devDependents: $devDependents }'
          )
        done

        # Example:
        # {
        #   "powerva-chat-adapter-test-util": {
        #     "dependents": [],
        #     "devDependents": [
        #       "powerva-turn-based-chat-adapter-framework",
        #       "powerva-chat-adapter"
        #     ]
        #   },
        #   "powerva-turn-based-chat-adapter-framework": {
        #     "dependents": [
        #       "powerva-chat-adapter"
        #     ],
        #     "devDependents": []
        #   },
        #   "powerva-chat-adapter": {
        #     "dependents": [
        #       "pages"
        #     ],
        #     "devDependents": []
        #   },
        #   "pages": {
        #     "dependents": [],
        #     "devDependents": []
        #   }
        # }
        echo $all_dependents | jq -r

        # Uninstall all local packages before installing newer version. We must uninstall all at once.
        # If we have 2+ packages that are not published, `npm install` one of them will say the other one is not found.
        local_packages_name=$(echo $version_map | jq -r '. | keys | join(" ")')

        echo npm uninstall $local_packages_name --workspaces
        npm uninstall $local_packages_name --workspaces

        # Reinstall dependencies with newer version.
        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')
          version=$(echo $version_map | jq --arg name $name -r '.[$name]')

          # Example: "--workspace=pages --workspace=powerva-chat-adapter"
          local_prod_packages=$(echo $all_dependents | jq --arg name $name -r '.[$name].dependents | map("--workspace=" + .) | join(" ")')

          # Install the package if there are any dependents.
          if [[ ! -z "$local_prod_packages" ]]
          then
            echo npm install $local_prod_packages $name@$version

            npm install \
              --ignore-scripts \
              --no-audit \
              --package-lock-only \
              --save \
              $local_prod_packages \
              $name@$version
          fi

          # Example: "--workspace=pages --workspace=powerva-chat-adapter"
          local_dev_packages=$(echo $all_dependents | jq --arg name $name -r '.[$name].devDependents | map("--workspace=" + .) | join(" ")')

          # Install the package if there are any dependents.
          if [[ ! -z "$local_dev_packages" ]]
          then
            echo npm install $local_dev_packages $name@$version

            npm install \
              --ignore-scripts \
              --no-audit \
              --package-lock-only \
              --save-dev \
              $local_dev_packages \
              $name@$version
          fi
        done
      shell: bash

    - name: Print package.json
      run: |
        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          name=$(cat $path/package.json | jq -r '.name')

          echo ::group::$name
          cat $path/package.json | jq -r '{ name: .name, version: .version, dependencies: .dependencies, devDependencies: .devDependencies }'
          echo ::endgroup::
        done
      shell: bash

    - if: inputs.stage
      name: Stage package.json
      run: |
        for path in $(cat ./package.json | jq -r '.workspaces[]')
        do
          git add $path/package.json
        done
      shell: bash

    - if: inputs.stage
      name: Stage package-lock.json
      run: git add package-lock.json
      shell: bash

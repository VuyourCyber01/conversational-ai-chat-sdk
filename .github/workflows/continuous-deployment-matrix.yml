name: Continuous deployment (matrix-based)
run-name: "${{ github.event_name != 'push' && format('Continuous deployment: {0} on {1}', github.event_name, github.ref_name) || null }}"

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.devcontainer/**'
      - '.github/**'
  workflow_dispatch: {}

# Do not cancel current run. This is because we are using ${{ github.sha }} to determine what to publish.
# If current run is cancelled, we will not publish packages for the current run.
concurrency: continuous-deployment

# Notes:
# - CyberEO: During production build, we must not install packages from npmjs.org.
#            Instead, we must use a reputable source, such as an internal feed.
# - CyberEO: Limit token usage. Only expose token in steps, rather than in jobs.

env:
  node-version: lts/Hydrogen
  publish-tag: release/vnext

jobs:
  # TODO: Add "prepare" job to prepare workspaces file
  build:
    # TODO: Turn some build steps into a reusable action under the current repo.
    #       - Set up NPM for production build
    #       - Set up package-lock.json for production build
    #       We should try not to make build into reusable... because it should be just run `npm run ci && npm run build`
    # TODO: Allow devs to not using a reputable NPM registry.
    environment: build-production
    name: Build
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node.js ${{ env.node-version }}
        uses: ./.github/actions/setup-node-for-production
        with:
          node-version: ${{ env.node-version }}
          registry-url: ${{ vars.AZDO_NPM_REGISTRY_URL }}
          registry-username: ${{ vars.AZDO_NPM_REGISTRY_USERNAME }}
      - env:
          NODE_AUTH_PASSWORD: ${{ secrets.AZDO_NPM_REGISTRY_PASSWORD }}
        run: npm install --global --ignore-scripts semver@latest # Skip scripts to prevent malicious scripts from stealing the token.
      - name: Redirect package-lock.json
        uses: ./.github/actions/redirect-package-lock
      - name: Build versions file # This will become source of truth.
        run: |
          BRANCH=`git branch --show-current`

          echo {} > package-versions.json

          for i in `cat package.json | jq -r '.workspaces | join("\n")'`
          do
            # TODO: Add time
            COMMITTER_DATE=`git log --date=format:%Y%m%d%H%M%S --pretty=format:'%cd' -1 ./$i/`
            COMMITTER_DATE_IN_ISO8601=`git log --pretty=format:'%cI' -1 ./$i/`
            LONG_COMMITISH=`git log --pretty=format:'%H' -1 ./$i/`
            SHORT_COMMITISH=`git log --pretty=format:'%h' -1 ./$i/`
            SEMVER_SHORT_COMMITISH=`echo $SHORT_COMMITISH | sed 's/^0*//'`
            VERSION=`cat ./$i/package.json | jq -r .version | xargs -L1 npm exec --offline -- semver --increment prerelease -n false --preid $BRANCH.$COMMITTER_DATE.$SEMVER_SHORT_COMMITISH`

            cat ./package-versions.json | jq --arg branch $BRANCH --arg committerDateInISO8601 $COMMITTER_DATE_IN_ISO8601 --arg longCommitish $LONG_COMMITISH --arg shortCommitish $SHORT_COMMITISH --arg path ./$i/ --arg version $VERSION --argfile packageJSON ./$i/package.json -r '. + { ($packageJSON.name): { branch: $branch, committerDate: $committerDateInISO8601, longCommitish: $longCommitish, name: $packageJSON.name, path: $path, private: ($packageJSON.private // false), shortCommitish: $shortCommitish, tarball: ("./" + $packageJSON.name + "-" + $version + ".tgz"), version: $version } }' > ./package-versions.json.tmp && true || exit 1

            mv ./package-versions.json.tmp ./package-versions.json && true || exit 1
          done

          cat package-versions.json

          echo \<details\>\<summary\>Content of \<code\>package-versions.json\</code\>\</summary\> >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo \`\`\`json >> $GITHUB_STEP_SUMMARY
          cat package-versions.json >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
          echo \</details\> >> $GITHUB_STEP_SUMMARY
      - id: build-matrix
        name: Build matrix
        run: |
          cat package-versions.json | jq -cr 'map(.name) | { "package-name": . }' > /tmp/matrix.json
          echo matrix=`cat /tmp/matrix.json` >> $GITHUB_OUTPUT

          echo \`\`\`json >> $GITHUB_STEP_SUMMARY
          cat /tmp/matrix.json >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
      - # We cannot run "npm version" right after "npx semver". Otherwise, next run of "npx semver" will ignore "-n false".
        # "npm version" will update workspaces. During update, it will need to talk to NPM registry.
        env:
          NODE_AUTH_PASSWORD: ${{ secrets.AZDO_NPM_REGISTRY_PASSWORD }}
        name: Bump versions
        run: cat package-versions.json | jq -cr 'to_entries | map("--workspace=" + .key + " " + .value.version) | join("\n")' | xargs -L1 npm version
      - env:
          NODE_AUTH_PASSWORD: ${{ secrets.AZDO_NPM_REGISTRY_PASSWORD }}
        run: npm clean-install --ignore-scripts # CyberEO: Ignore scripts to prevent malicious scripts from stealing the token.
      - name: Build
        run: npm run build --if-present --workspaces=true
      - name: Pack tarballs
        run: npm pack --pack-destination=$PWD --workspaces=true
      - name: 'Sanity check: all tarballs exist'
        run: |
          for TARBALL_NAME in `cat package-versions.json | jq -r '.[] | .tarball'`
          do
            compgen -G $TARBALL_NAME
          done
      - name: Upload versions file artifact
        uses: actions/upload-artifact@v3
        with:
          name: package-versions
          path: ./package-versions.json
      - name: Upload packages artifact
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./*.tgz

  release-upload-workspaces-json:
    name: 'Release: Upload workspaces file'
    needs:
      - build
    permissions:
      contents: write # "contents" is required for modifying releases.
    runs-on: ubuntu-latest
    steps:
      - name: Download workspaces file
        uses: actions/download-artifact@v3
        with:
          name: package-versions
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Upload workspaces file to GitHub "${{ env.publish-tag }}" release
        run: gh release upload ${{ env.publish-tag }} package-versions.json --clobber --repo ${{ github.repository }}

  release-upload-package:
    name: 'Release: Upload package'
    needs:
      - build
    permissions:
      contents: write # "contents" is required for modifying releases.
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - name: Download versions file
        uses: actions/download-artifact@v3
        with:
          name: package-versions
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
      - name: List all publishing packages
        run: ls -l ./*.tgz
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Upload packages to GitHub "${{ env.publish-tag }}" release
        run: |
          gh release view ${{ env.publish-tag }} --json assets --repo ${{ github.repository }} > assets.json

          TARBALL=`cat package-versions.json | jq --arg name ${{ matrix.package-name }} -r '.[$name] | .tarball | ltrimstr("./")'`

          # Only keep latest assets, remove obsoleted and upload new one.
          if [[ "`cat assets.json | jq --arg name $TARBALL '.assets | any(select(.name == $name))'`" == "false" ]]
          then
            for ASSET_NAME in `cat assets.json | jq -r --arg name ${{ matrix.package-name }} '.assets | map(select(.name | test($name + "-[0-9]"))) | map(.name) | join("\n")'`
            do
              gh release delete-asset ${{ env.publish-tag }} $ASSET_NAME --repo ${{ github.repository }} || true
              echo "- Deleted \`$ASSET_NAME\`" >> $GITHUB_STEP_SUMMARY
            done

            gh release upload ${{ env.publish-tag }} $TARBALL --repo ${{ github.repository }}
            echo "- Uploaded \`$TARBALL\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Already uploaded, skipping \`$TARBALL\`" >> $GITHUB_STEP_SUMMARY
          fi

  # Update release after re-pushing a new tag.
  release-publish:
    environment:
      name: github-release
      url: ${{ steps.prepare.outputs.url }}
    name: 'Release: Publish'
    needs:
      - release-upload-package
      - release-upload-workspaces-json
    outputs:
      tag-url: ${{ steps.prepare.outputs.tag-url }}
      url: ${{ steps.prepare.outputs.url }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - id: prepare
        name: Prepare
        run: |
          echo tag-url=${{ github.server_url }}/${{ github.repository }}/tree/${{ env.publish-tag }} >> $GITHUB_OUTPUT
          echo url=${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.publish-tag }} >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all tags.
      - name: Update tag
        run: |
          git tag -d ${{ env.publish-tag }} || true
          git tag ${{ env.publish-tag }}
          git push origin :${{ env.publish-tag }} || true
          git push origin ${{ env.publish-tag }}
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Publish release
        run: gh release edit ${{ env.publish-tag }} --draft=false --prerelease --repo ${{ github.repository }}

  github-pages-prepare:
    name: 'GitHub Pages: Prepare'
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
      - name: Extract pages package
        run: |
          mkdir ./_site/
          tar --extract --verbose --file=`ls -1 pages-[0-9]*.tgz` --strip-component=2 --directory=./_site/ package/public
          ls -la ./_site/
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2

  github-pages-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      url: ${{ steps.deployment.outputs.page_url }}
    name: 'GitHub Pages: Deploy'
    needs:
      - github-pages-prepare
    permissions:
      id-token: write
      pages: write
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  github-packages-prepare:
    name: 'GitHub Packages: Prepare'
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}
    steps:
      - name: Download versions file
        uses: actions/download-artifact@v3
        with:
          name: package-versions
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
      - id: rescope
        name: Rescope package
        run: |
          mkdir patched

          TARBALL=`cat package-versions.json | jq --arg name ${{ matrix.package-name }} -r '.[$name] | .tarball'`

          tar -xvf $TARBALL_NAME
          cd package

          cat package.json | jq --argfile versions ../package-versions.json -r '. | (.name = "@${{ github.repository_owner }}/" + .name) | (.dependencies |= (. | with_entries(if ({ (.key): {} } | inside($versions)) then . | (.value = "npm:@${{ github.repository_owner }}/" + .key + "@" + .value) else . end))) | (.devDependencies |= (. | with_entries(if ({ (.key): {} } | inside($versions)) then . | (.value = "npm:@${{ github.repository_owner }}/" + .key + "@" + .value) else . end)))' > package.tmp.json
          mv package.tmp.json package.json

          PATCHED_PACKAGE_NAME_AND_VERSION=`cat package.json | jq -r '.name + "@" + .version'`
          PATCHED_TARBALL_NAME=`npm pack --ignore-scripts --json | jq -r '.[0].filename'`

          echo "Changed package name to \`$PATCHED_PACKAGE_NAME_AND_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo package-full-name=$PATCHED_PACKAGE_NAME_AND_VERSION >> $GITHUB_OUTPUT
          echo tarball-name=$PATCHED_TARBALL_NAME >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v3
        with:
          name: scoped-packages
          path: ${{ steps.rescope.outputs.tarball-name }}

  github-packages-publish:
    environment:
      name: github-packages
      url: ${{ steps.prepare.outputs.url }}
    name: 'GitHub Packages: Publish'
    needs:
      - github-packages-prepare
    outputs:
      url: ${{ steps.prepare.outputs.url }}
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
      - id: prepare
        name: Prepare
        run: echo url=${{ github.server_url }}/${{ github.repository_owner }}?tab=packages&repo_name=${{ github.event.repository.name }} >> $GITHUB_OUTPUT
      - name: Download workspaces file
        uses: actions/download-artifact@v3
        with:
          name: package-versions
      - uses: actions/download-artifact@v3
        with:
          name: scoped-packages
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          registry-url: https://npm.pkg.github.com/
      - env:
          NODE_AUTH_TOKEN: ${{ github.token }}
        name: Publish package
        run: |
          # Make sure we don't publish tarball that are already published.

          TARBALL=`cat package-versions.json | jq --arg name ${{ matrix.package-name }} -r '.[$name] | .tarball'`

          # PACKAGE_NAME_AND_VERSION=@someone/package-a@1.2.3
          PACKAGE_NAME_AND_VERSION=`tar -xf $TARBALL_NAME --to-stdout package/package.json | jq -r '.name + "@" + .version'`

          # EXIST_VERSION=1.2.3 or empty
          EXIST=`npm view $PACKAGE_NAME_AND_VERSION --json 2>/dev/null | jq -r 'if .error then false else true end'`

          if [ "$EXIST" == "false" ]
          then
            echo - Publishing \`$PACKAGE_NAME_AND_VERSION\` >> $GITHUB_STEP_SUMMARY
            # npm publish $TARBALL_NAME
          else
            echo - Already published, skipping \`$PACKAGE_NAME_AND_VERSION\` >> $GITHUB_STEP_SUMMARY
          fi

  summary:
    if: ${{ always() }}
    name: Summary
    needs:
      - github-packages-publish
      - github-pages-deploy
      - release-publish
    runs-on: ubuntu-latest
    steps:
      - name: Post deployment
        run: |
          echo - [GitHub Packages]\(${{ needs.github-packages-publish.outputs.url }}\) >> $GITHUB_STEP_SUMMARY
          echo - [Pages]\(${{ needs.github-pages-deploy.outputs.url }}\) >> $GITHUB_STEP_SUMMARY
          echo - [Release]\(${{ needs.release-publish.outputs.url }}\) >> $GITHUB_STEP_SUMMARY
          echo - [Source code \(tagged\)]\(${{ needs.release-publish.outputs.tag-url }}\) >> $GITHUB_STEP_SUMMARY

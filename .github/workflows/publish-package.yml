name: Publish production package
run-name: 'Publish: ${{ inputs.name }}'

on:
  workflow_dispatch:
    inputs:
      dry-run:
        default: true # TODO: Fix this
        description: Dry run
        required: true
        type: boolean
      # In pull-request-validation.yml, we enforce that the package name must equals to the package path.
      name:
        description: Package name
        options:
          - powerva-chat-adapter
          - powerva-chat-adapter-test-util
          - powerva-turn-based-chat-adapter-framework
        required: true
        type: choice

concurrency: publish-package/${{ inputs.name }}

defaults:
  run:
    shell: bash

env:
  node-version: lts/Hydrogen
  use-secure-feed: false # TODO: Temporary set to false during development.

# Notes:
# - CyberEO: During production build, we must not install packages from npmjs.com.
#            Instead, we must use an internal feed as reputable source.
# - CyberEO: Limit token usage. Only expose token in steps, rather than in jobs.

jobs:
  prepare:
    name: Prepare
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - id: look-up-package-path
        name: Look up package path
        run: |
          for path in $(cat package.json | jq -r '.workspaces | .[]')
          do
            name=$(cat $path/package.json | jq -r .name)

            echo ::group::$name

            if [[ $name == ${{ inputs.name }} ]]
            then
              echo path=$path | tee --append $GITHUB_OUTPUT
              exit 0
            fi

            echo ::endgroup::
          done

          exit 1

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}

      - if: ${{ env.use-secure-feed != 'false' }}
        name: Use secure feed
        run: npx https://aka.ms/EnableSecureFeed

      - id: bump-versions
        name: Bump versions
        run: |
          committed_version=$(cat ${{ steps.look-up-package-path.outputs.path }}/package.json | jq -r '.version')
          production_version=$(npm exec -- semver --increment patch $committed_version)
          next_prerelease_version=$(npm exec -- semver --increment prepatch $production_version)

          echo committed-version=$committed_version | tee --append $GITHUB_OUTPUT
          echo production-version=$production_version | tee --append $GITHUB_OUTPUT
          echo next-prerelease-version=$next_prerelease_version | tee --append $GITHUB_OUTPUT

      - name: Build matrix
        run: |
          mkdir .tmp/

          jq \
            --arg committedVersion "${{ steps.bump-versions.outputs.committed-version }}" \
            --arg name "${{ inputs.name }}" \
            --arg nextPrereleaseVersion "${{ steps.bump-versions.outputs.next-prerelease-version }}" \
            --arg path "${{ steps.look-up-package-path.outputs.path }}" \
            --arg productionVersion "${{ steps.bump-versions.outputs.production-version }}" \
            -cnr \
            '{ include: [{ "committed-version": $committedVersion, name: $name, "next-prerelease-version": $nextPrereleaseVersion, path: $path, "production-version": $productionVersion }] }' | tee .tmp/matrix.json

      - name: 'Sanity check: matrix "committed-version" must be prerelease and ends with -0'
        run: '[[ "$(cat .tmp/matrix.json | jq -r ''.include[0]["committed-version"]'')" == *-0 ]]'

      - name: 'Sanity check: matrix "name" must not be empty'
        run: '[[ ! -z "$(cat .tmp/matrix.json | jq -r ''.include[0].name'')" ]]'

      - name: 'Sanity check: matrix "next-prerelease-version" must be prerelease and ends with -0'
        run: '[[ "$(cat .tmp/matrix.json | jq -r ''.include[0]["next-prerelease-version"]'')" == *-0 ]]'

      - name: 'Sanity check: matrix "path" must not be empty'
        run: '[[ ! -z "$(cat .tmp/matrix.json | jq -r ''.include[0].path'')" ]]'

      - name: 'Sanity check: matrix "path" must point to the right package'
        run: |
          package_json_path=$(cat .tmp/matrix.json | jq -r '.include[0].path')/package.json
          [[ "$(cat $package_json_path | jq -r '.name')" == "${{ inputs.name }}" ]]

      - name: 'Sanity check: matrix "production-version" must not be empty'
        run: '[[ ! -z "$(cat .tmp/matrix.json | jq -r ''.include[0]["production-version"]'')" ]]'

      - id: set-outputs
        name: Set outputs
        run: echo matrix=$(< .tmp/matrix.json) | tee --append $GITHUB_OUTPUT

  build:
    name: Build (${{ matrix.name }}@${{ matrix.production-version }})
    needs: prepare
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}

      - if: ${{ env.use-secure-feed != 'false' }}
        name: Use secure feed
        run: npx https://aka.ms/EnableSecureFeed
        shell: bash

      - id: bump-version
        name: Bump version to production
        run: npm version --no-git-tag-version --workspace=${{ matrix.name }} ${{ matrix.production-version }}

      - name: Print bumped package.json
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: ${{ matrix.path }}/package.json
          title: '`package.json` with production version'
          type: json

      - run: npm clean-install --ignore-scripts --strict-peer-deps # Prevents malicious scripts from stealing our token.

      - run: npm run postinstall --if-present --workspaces=true

      - name: Build
        run: npm run build --if-present --workspaces=true

      - id: pack
        name: Pack
        run: |
          mkdir -p .tmp/tarball/

          npm pack --json --pack-destination=.tmp/tarball/ --workspace=${{ matrix.name }} > .tmp/pack-output.json
          cat .tmp/pack-output.json | jq '.[0] * { files: "..." }'

          echo filename=$(cat .tmp/pack-output.json | jq -r '.[0].filename') | tee --append $GITHUB_OUTPUT

      - name: Upload tarball
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: tarball
          path: .tmp/tarball/${{ steps.pack.outputs.filename }}

      - env:
          matrix: ${{ needs.prepare.outputs.matrix }}
        id: update-matrix
        name: Update matrix
        run: |
          echo $matrix > .tmp/matrix.json

          filename=${{ steps.pack.outputs.filename }}
          production_version=$(tar -xf .tmp/tarball/$filename --to-stdout package/package.json | jq -r '.version')

          cat .tmp/matrix.json | jq \
            --arg filename "$filename" \
            --arg productionVersion "$production_version" \
            -cr '{ include: [.include[0] * { filename: $filename, "production-version": $productionVersion }] }' \
            | tee .tmp/matrix.json.tmp

          mv .tmp/matrix.json.tmp .tmp/matrix.json

      - id: set-outputs
        name: Set outputs
        run: echo matrix=$(< .tmp/matrix.json) | tee --append $GITHUB_OUTPUT

  publish:
    environment:
      name: npm-publish
      url: https://npmjs.com/package/${{ matrix.name }}/v/${{ matrix.version }}
    name: Publish (${{ matrix.name }}@${{ matrix.production-version }})
    needs: build
    permissions:
      contents: read
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: tarball
          path: .tmp/tarball/

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}

      - name: Print matrix
        run: |
          cat << EOL
          ${{ toJSON(matrix) }}
          EOL

      - name: 'Sanity check: tarball exists'
        run: '[[ -f .tmp/tarball/${{ matrix.filename }} ]]'

      - name: Print package.json
        run: tar -xf .tmp/tarball/${{ matrix.filename }} --to-stdout package/package.json

      - id: has-published
        name: Checks if ${{ matrix.name }}@${{ matrix.production-version }} is already published
        uses: ./.github/actions/check-if-package-has-published
        with:
          name: ${{ matrix.name }}
          version: ${{ matrix.version }}

      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ !inputs.dry-run && steps.has-published.outputs.published == 'false' }}
        name: Publish ${{ matrix.name }}@${{ matrix.version }}
        # TODO: Enable --provenance when in official repo.
        run: npm publish --access public --json .tmp/tarball/${{ matrix.filename }}

  create-release:
    continue-on-error: true
    env:
      tag: release/${{ matrix.name }}/v${{ matrix.production-version }}
    environment:
      name: github-release
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.tag }}
    name: Create release (${{ matrix.production-version }})
    needs:
      - build
      - publish
    permissions:
      contents: write # Required for creating release
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: tarball
          path: .tmp/tarball/

      - # We need to use "gh api" to create a tag/ref.
        # Otherwise, if last commit was modifying workflow, it will fail with permission issues.
        env:
          GH_TOKEN: ${{ github.token }}
        # if: ${{ !inputs.dry-run }}
        name: Push tag
        run: gh api repos/${{ github.repository }}/git/refs --field ref=refs/tags/${{ env.tag }} --field sha=${{ github.sha }}

      - env:
          GH_TOKEN: ${{ github.token }}
        # if: ${{ !inputs.dry-run }}
        name: Create release
        run: |
          date=$(date +%F)

          gh release create \
            ${{ env.tag }} \
            .tmp/tarball/${{ matrix.filename }} \
            --notes "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --title "${{ matrix.name }}@${{ matrix.version }} - $date" \
            --repo ${{ github.repository }}

  pull-request-create-bump-version:
    env:
      branch-name: bot/postpublish/${{ matrix.name }}/v${{ matrix.next-prerelease-version }}
    environment:
      name: pull-request
      url: ${{ steps.create-pull-request.outputs.url }}
    name: Create pull request (${{ matrix.next-prerelease-version }})
    needs:
      - build
      - publish
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.build.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}

      - if: ${{ env.use-secure-feed != 'false' }}
        name: Use secure feed
        run: npx https://aka.ms/EnableSecureFeed

      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-branch
        name: Create branch
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name "@${{ github.actor }}"

          git checkout -b ${{ env.branch-name }}

      - name: Bump CHANGELOG.md
        run: |
          npx keep-a-changelog \
            --file="${{ matrix.path }}/CHANGELOG.md" \
            --format=markdownlint \
            --release="${{ matrix.production-version }}" \
            --url="${{ github.server_url }}/${{ github.repository }}" || true
          npx keep-a-changelog \
            --create
            --file="${{ matrix.path }}/CHANGELOG.md" \
            --format=markdownlint \
            --url="${{ github.server_url }}/${{ github.repository }}" || true

      - name: Stage CHANGELOG.md
        run: git add ${{ matrix.path }}/CHANGELOG.md

      - id: bump-version
        name: Bump ${{ matrix.name }}@${{ matrix.next-prerelease-version }}
        run: npm version --no-git-tag-version --workspace=${{ matrix.name }} ${{ matrix.next-prerelease-version }}

      - name: Print package.json
        run: cat ${{ matrix.path }}/package.json | jq -r

      - name: Stage package-lock.json
        run: git add package-lock.json

      - name: Stage ${{ matrix.path }}/package.json
        run: git add ${{ matrix.path }}/package.json

      - name: Commit branch
        run: git commit --message="Bump ${{ matrix.name }}@${{ matrix.next-prerelease-version }}"

      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        # if: ${{ !inputs.dry-run }}
        name: Push branch
        run: git push --set-upstream origin ${{ env.branch-name }}

      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-pull-request
        # if: ${{ !inputs.dry-run }}
        name: Create pull request
        # TODO: Add "bot" label
        run: |
          echo url=$(gh pr create \
            --assignee @me \
            --body "> Related to ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}." \
            --fill \
            --repo ${{ github.repository }} \
          ) | tee --append $GITHUB_OUTPUT

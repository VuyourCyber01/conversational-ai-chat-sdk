name: Publish package

on:
  workflow_dispatch:
    inputs:
      # In pull-request-validation.yml, we enforce that the package name must equals to the package path.
      package-name:
        description: Package name
        options:
          - powerva-chat-adapter
          - powerva-turn-based-chat-adapter-framework
        required: true
        type: choice

concurrency: publish-package/${{ inputs.package-name }}

env:
  node-version: lts/Hydrogen

jobs:
  build:
    name: Build
    outputs:
      package-path: ${{ steps.get-package-json.outputs.package-path }}
      version: ${{ steps.bump-version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      - run: npm clean-install
      - # Gets the path of the package which match inputs.package-name.
        id: get-package-json
        name: Get package JSON
        run: echo package-path=`npm ls --workspace=${{ inputs.package-name }} --json | jq --arg packageName ${{ inputs.package-name }} -r '.dependencies[$packageName].resolved | ltrimstr("file:../") | if . then . else halt_error(1) end'` >> $GITHUB_OUTPUT
      - name: 'Sanity check: found package path'
        run: |
          ls -l ${{ steps.get-package-json.outputs.package-path }}/package.json
          compgen -G ${{ steps.get-package-json.outputs.package-path }}/package.json
      - name: 'Sanity check: package.json/name is same as package-name'
        run: |
          cat ${{ steps.get-package-json.outputs.package-path }}/package.json
          cat ${{ steps.get-package-json.outputs.package-path }}/package.json | jq '.name == "${{ inputs.package-name }}" | if . then empty else halt_error(1) end'
      - name: 'Sanity check: package.json/version must be prerelease'
        run: |
          cat ${{ steps.get-package-json.outputs.package-path }}/package.json
          cat ${{ steps.get-package-json.outputs.package-path }}/package.json | jq '.version | contains("-") | if . then empty else halt_error(1) end'
      - id: bump-version
        name: Bump version
        run: |
          npm version --no-git-tag-version --workspace=${{ inputs.package-name }} patch
          echo version=`npm version --json --workspace=${{ inputs.package-name }} | jq --arg packageName ${{ inputs.package-name }} -r '.[$packageName]'` >> $GITHUB_OUTPUT
          cat ${{ steps.get-package-json.outputs.package-path }}/package.json
      - name: Build
        run: npm run build --if-present --workspaces=true
      - id: pack-tarball
        name: Pack tarball
        run: |
          npm pack --pack-destination=$PWD --workspace=${{ inputs.package-name }}
          echo tarball-path=./${{ inputs.package-name }}-${{ steps.bump-version.outputs.version }}.tgz >> $GITHUB_OUTPUT
      - name: 'Sanity check: got tarball'
        run: compgen -G ${{ steps.pack-tarball.outputs.tarball-path }}
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: ${{ steps.pack-tarball.outputs.tarball-path }}

  create-tag:
    environment:
      name: pull-request
      url: ${{ steps.push-tag.outputs.url }}
    name: Create tag
    needs:
      - build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: push-tag
        name: Push tag
        run: |
          TAG=release/${{ inputs.package-name }}/${{ needs.build.outputs.version }}
          URL=${{ github.server_url }}/${{ github.repository }}/tree/$TAG

          git config user.email "${{ format('@{0}', github.actor) }}"
          git config user.name "${{ format('@{0}', github.actor) }}"
          git tag $TAG
          git push --set-upstream origin $TAG

          echo tag=$TAG >> $GITHUB_OUTPUT
          echo url=$URL >> $GITHUB_OUTPUT

          echo Tag [\`$TAG\`]\($URL\) created. >> $GITHUB_STEP_SUMMARY

  create-bump-prepatch-pull-request:
    environment:
      name: pull-request
      url: ${{ steps.create-pull-request.outputs.url }}
    name: Create pull request to bump to prepatch
    needs:
      - build
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      - id: bump-to-prepatch
        name: Bump to prepatch
        run: |
          npm version --no-git-tag-version --workspace=${{ inputs.package-name }} ${{ needs.build.outputs.version }}
          npm version --no-git-tag-version --workspace=${{ inputs.package-name }} prepatch

          VERSION=`npm version --json --workspace=${{ inputs.package-name }} | jq --arg packageName ${{ inputs.package-name }} -r '.[$packageName]'`

          echo version=$VERSION >> $GITHUB_OUTPUT

          cat ${{ needs.build.outputs.package-path }}/package.json

          echo Bump [\`${{ inputs.package-name }}\`]\(${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref }}/packages/${{ inputs.package-name }}/\) to \`$VERSION\`
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-branch
        name: Create branch
        run: |
          BRANCH_NAME=bot/postpublish/${{ inputs.package-name }}/${{ steps.bump-to-prepatch.outputs.version }}

          git config user.email "${{ format('@{0}', github.actor) }}"
          git config user.name "${{ format('@{0}', github.actor) }}"

          git checkout -b $BRANCH_NAME
          git add ./package-lock.json
          git add ./packages/${{ inputs.package-name }}/package.json
          git commit -m "Bump ${{ inputs.package-name }}@${{ steps.bump-to-prepatch.outputs.version }}"
          git push --set-upstream origin $BRANCH_NAME

          echo branch-name=$BRANCH_NAME >> $GITHUB_OUTPUT
          echo Branch created at [\`$BRANCH_NAME\`]\(${{ github.server_url }}/${{ github.repository }}/tree/$BRANCH_NAME\). >> $GITHUB_STEP_SUMMARY
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-pull-request
        name: Create pull request
        run: |
          URL=`gh pr create --assignee @me --fill --label bot --repo ${{ github.repository }}`

          echo url=$URL >> $GITHUB_OUTPUT
          echo Pull request created at $URL. >> $GITHUB_STEP_SUMMARY

name: Publish package
run-name: 'Publish: ${{ inputs.package-name }}'

on:
  workflow_dispatch:
    inputs:
      # In pull-request-validation.yml, we enforce that the package name must equals to the package path.
      package-name:
        description: Package name
        options:
          - powerva-chat-adapter
          - powerva-chat-adapter-test-util
          - powerva-turn-based-chat-adapter-framework
        required: true
        type: choice

concurrency: publish-package/${{ inputs.package-name }}

env:
  node-version: lts/Hydrogen

# Notes:
# - CyberEO: During production build, we must not install packages from npmjs.com.
#            Instead, we must use an internal feed as reputable source.
# - CyberEO: Limit token usage. Only expose token in steps, rather than in jobs.

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: get-package-path
        name: Get package path
        uses: ./.github/actions/get-package-path
        with:
          name: ${{ inputs.package-name }}
      - name: Build workflow file
        run: |
          jq --arg packageName "${{ inputs.package-name }}" --arg packagePath "${{ steps.get-package-path.outputs.path }}" -nr '{ packageName: $packageName, packagePath: $packagePath }' > workflow.json

          cat workflow.json
      - name: Upload workflow file
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: workflow
          path: ./workflow.json
  build:
    name: Build
    needs:
      - prepare
    outputs:
      tarball: ${{ steps.pack-tarball.outputs.tarball }}
      version: ${{ steps.bump-version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: workflow
      - id: prepare
        name: Prepare
        run: |
          echo package-name=`cat workflow.json | jq -r '.packageName'` >> $GITHUB_OUTPUT
          echo package-path=`cat workflow.json | jq -r '.packagePath'` >> $GITHUB_OUTPUT
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      # TODO: Uncomment this one for production, we must use secure feed.
      # - name: Use secure feed
      #   run: npx https://aka.ms/EnableSecureFeed
      #   shell: bash
      - id: bump-version
        name: Bump version
        run: |
          npm version --no-git-tag-version --workspace=${{ steps.prepare.outputs.package-name }} patch

          cat ${{ steps.prepare.outputs.outputs.package-path }}/package.json

          VERSION=`cat ${{ steps.prepare.outputs.outputs.package-path }}/package.json | jq -r '.version'`

          echo Bumped to $PACKAGE_ID.

          echo version=$VERSION >> $GITHUB_OUTPUT
      - name: Run npm clean-install
        run: npm clean-install --ignore-scripts # Prevents malicious scripts from stealing our token.
      - name: Build
        run: npm run build --if-present --workspaces=true
      - id: pack-tarball
        name: Pack tarball
        run: |
          TARBALL=`npm pack --json --pack-destination=$PWD --workspace=${{ steps.prepare.outputs.package-name }} | jq -r '.[0].file'`

          echo Packed to $TARBALL.

          echo tarball=$TARBALL >> $GITHUB_OUTPUT
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: package
          path: ${{ steps.pack-tarball.outputs.tarball }}
      - name: Update workflow file
        run: |
          cat ./workflow.json | jq --arg version "${{ steps.pack-tarball.outputs.version }}" -r '. + { version: $version }' > /tmp/workflow.json
          mv /tmp/workflow.json ./workflow.json

          cat ./workflow.json
      - name: Upload workflow file
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: workflow
          path: ./workflow.json
      - name: Summary
        run: |
          echo \| Package name \| Version \| >> $GITHUB_STEP_SUMMARY
          echo \| - \| - \| >> $GITHUB_STEP_SUMMARY
          echo \| ${{ steps.prepare.outputs.package-name }} \| ${{ steps.bump-version.outputs.version }} \| >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY

          echo \<details\>\<summary\>Content of \<code\>packages/${{ steps.pack-tarball.outputs.tarball }}/package.json\</code\>\</summary\> >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo \`\`\`json >> $GITHUB_STEP_SUMMARY
          tar --extract --file=${{ steps.pack-tarball.outputs.tarballl }} --to-stdout package/package.json >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
          echo \</details\> >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY

          echo \<details\>\<summary\>Content of \<code\>${{ steps.pack-tarball.outputs.tarball }}\</code\>\</summary\> >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
          tar --list --file=${{ steps.pack-tarball.outputs.tarball }} --verbose >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
          echo \</details\> >> $GITHUB_STEP_SUMMARY

  publish:
    environment:
      name: npm-publish
      url: ${{ steps.publish.outputs.url }}
    name: Publish
    needs:
      - build
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry:
          - ''
          - https://npm.pkg.github.com/
    steps:
      - name: Download workflow file
        uses: actions/download-artifact@v3
        with:
          name: workflow
      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: package
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          registry-url: ${{ matrix.registry }}
      - id: prepare
        name: Prepare
        run: |
          echo package-name=`cat workflow.json | jq -r '.packageName'` >> $GITHUB_OUTPUT
          echo version=`cat workflow.json | jq -r '.version'` >> $GITHUB_OUTPUT

          echo package-id=`tar -xf ${{ needs.build.outputs.tarball }} --to-stdout package/package.json | jq -r '.name + "@" + .version'` >> $GITHUB_OUTPUT
          echo token=${{ matrix.registry == '' && secrets.NPM_TOKEN || github.token }}
      - id: has-published
        name: Checks if the package has already published
        uses: ./.github/actions/check-if-package-has-published
        with:
          name: ${{ steps.prepare.outputs.package-name }}
          token: ${{ steps.prepare.outputs.token }}
          version: ${{ needs.build.outputs.versions }}
      - env:
          NODE_AUTH_TOKEN: ${{ steps.prepare.outputs.token }}
        if: ${{ steps.has-published.outputs.published == 'false' }}
        name: Publish ${{ steps.prepare.outputs.package-id }}
        run: |
          ls -l ${{ steps.prepare.outputs.tarball }}
          echo npm publish --access public --json --provenance ${{ needs.build.outputs.tarball }}

          URL=https://npmjs.com/package/${{ steps.prepare.outputs.package-name }}/v/${{ steps.prepare.outputs.version }}

          echo Published to $URL. >> $GITHUB_STEP_SUMMARY

          echo url=$URL >> $GITHUB_OUTPUT

  create-release:
    environment:
      name: pull-request
      url: ${{ steps.create-release.outputs.url }}
    name: Create release
    needs:
      - build
      - publish
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download workflow file
        uses: actions/download-artifact@v3
        with:
          name: workflow
      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: package
      - id: prepare
        name: Prepare
        run: |
          PACKAGE_NAME=`cat workflow.json | jq -r '.packageName'`
          VERSION=`cat workflow.json | jq -r '.version'`

          echo package-name=$PACKAGE_NAME >> $GITHUB_OUTPUT
          echo tag=release/$PACKAGE_NAME/v$VERSION
          echo version=$VERSION >> $GITHUB_OUTPUT
      - # We need to use "gh api" to create a tag/ref.
        # Otherwise, if last commit was modifying workflow, it will fail with permission issues.
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: push-tag
        name: Push tag
        run: |
          URL=${{ github.server_url }}/${{ github.repository }}/tree/${{ steps.prepare.outputs.tag }}

          gh api repos/${{ github.repository }}/git/refs --field ref=refs/tags/${{ steps.prepare.outputs.tag }} --field sha=${{ github.sha }}

          echo Tag [\`${{ steps.prepare.outputs.tag }}\`]\(${{ github.server_url }}/${{ github.repository }}/tree/${{ steps.prepare.outputs.tag }}\) created. >> $GITHUB_STEP_SUMMARY
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-release
        name: Create release
        run: |
          DATE=`date +%F`
          URL=${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.push-tag.outputs.tag }}

          gh release create ${{ steps.push-tag.outputs.tag }} ./*.tgz --repo ${{ github.repository }} --title "${{ steps.prepare.outputs.package-name }}@${{ steps.prepare.outputs.version }} - $DATE"
          echo url=$URL >> $GITHUB_OUTPUT

          echo Release at $URL >> $GITHUB_STEP_SUMMARY

  pull-request-create-bump-version:
    environment:
      name: pull-request
      url: ${{ steps.create-pull-request.outputs.url }}
    name: Create pull request to bump
    needs:
      - build
      - publish
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download workflow file
        uses: actions/download-artifact@v3
        with:
          name: workflow
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      # TODO: Temporarily disable secure feed.
      # - name: Use secure feed
      #   run: npx https://aka.ms/EnableSecureFeed
      #   shell: bash
      - id: prepare
        name: Prepare
        run: |
          PACKAGE_NAME=`cat workflow.json | jq -r '.packageName'`
          PACKAGE_PATH=`cat workflow.json | jq -r '.packagePath'`
          VERSION=`cat workflow.json | jq -r '.version'`
          NEXT_VERSION=`npx semver -i prepatch $VERSION`
          BRANCH_NAME=bot/postpublish/$PACKAGE_NAME/v$NEXT_VERSION

          echo branch-name=$BRANCH_NAME >> $GITHUB_OUTPUT
          echo next-version=$NEXT_VERSION >> $GITHUB_OUTPUT
          echo package-name=$PACKAGE_NAME >> $GITHUB_OUTPUT
          echo version=$VERSION >> $GITHUB_OUTPUT
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-branch
        name: Create branch
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name "@${{ github.actor }}"

          git checkout -b ${{ steps.prepare.outputs.branch-name }}
      - name: Bump CHANGELOG.md
        run: |
          npx keep-a-changelog --file="${{ steps.prepare.outputs.package-path }}/CHANGELOG.md" --format=markdownlint --url="${{ github.server_url }}/${{ github.repository }}" --release="${{ steps.prepare.outputs.version }}"
          git add ${{ steps.prepare.outputs.package-path }}/CHANGELOG.md
      - id: bump-version
        name: Bump version to prepatch
        run: |
          npm version --no-git-tag-version --workspace=${{ steps.prepare.outputs.package-name }} ${{ steps.prepare.outputs.next-version }}

          git add ./package-lock.json
          git add ${{ steps.prepare.outputs.package-path }}/package.json

          cat ${{ steps.prepare.outputs.package-path }}/package.json

          echo Bump [\`${{ steps.prepare.outputs.package-name }}\`]\(${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}/packages/${{ steps.prepare.outputs.package-name }}/\) to \`${{ steps.prepare.outputs.version }}\`. >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY

          echo \<details\>\<summary\>Content of \<code\>${{ steps.prepare.outputs.package-name }}/package.json\</code\>\</summary\> >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo \`\`\`json >> $GITHUB_STEP_SUMMARY
          cat ${{ steps.prepare.outputs.package-path }}/package.json >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
          echo \</details\> >> $GITHUB_STEP_SUMMARY
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        name: Commit branch
        run: |
          git commit -m "Bump ${{ steps.prepare.outputs.package-name }}@${{ steps.prepare.outputs.next-version }}"
          git push --set-upstream origin ${{ steps.prepare.outputs.branch-name }}

          echo Branch created at [\`${{ steps.prepare.outputs.branch-name }}\`]\(${{ github.server_url }}/${{ github.repository }}/tree/${{ steps.prepare.outputs.branch-name }}\). >> $GITHUB_STEP_SUMMARY
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-pull-request
        name: Create pull request
        run: |
          URL=`gh pr create --assignee @me --body "Post-publish of ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}." --fill --label bot --repo ${{ github.repository }}`

          echo url=$URL >> $GITHUB_OUTPUT
          echo Pull request created at $URL. >> $GITHUB_STEP_SUMMARY

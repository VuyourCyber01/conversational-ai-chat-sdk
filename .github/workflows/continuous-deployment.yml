name: Continuous deployment
run-name: "${{ github.event_name != 'push' && format('Continuous deployment: {0} on {1}', github.event_name, github.ref_name) || null }}"

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.devcontainer/**'
      - '.github/**'
  workflow_dispatch: {}

# Do not cancel current run. This is because we are using ${{ github.sha }} to determine what to publish.
# If current run is cancelled, we will not publish packages for the current run.
concurrency: continuous-deployment

# Notes:
# - CyberEO: During production build, we must not install packages from npmjs.com.
#            Instead, we must use an internal feed as reputable source.
# - CyberEO: Limit token usage. Only expose token in steps, rather than in jobs.

env:
  node-version: lts/Hydrogen
  publish-tag: release/vnext

jobs:
  build:
    # TODO: Turn some build steps into a reusable action under the current repo.
    #       - Set up NPM for production build
    #       - Set up package-lock.json for production build
    #       We should try not to make build into reusable... because it should be just run `npm run ci && npm run build`
    environment: build-production
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: 'Sanity check: NPM registry URL is valid'
        run: if [[ "${{ vars.AZDO_NPM_REGISTRY_URL }}" != */ ]]; then exit 1; fi
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          always-auth: true
          cache: npm
          node-version: ${{ env.node-version }}
          registry-url: ${{ vars.AZDO_NPM_REGISTRY_URL }}
      - name: Configure NPM
        run: |
          NPM_REGISTRY_URL_WITHOUT_PROTOCOL=`echo ${{ vars.AZDO_NPM_REGISTRY_URL }} | sed -e 's/^https://'`

          npm config delete $NPM_REGISTRY_URL_WITHOUT_PROTOCOL:_authToken
          npm config set $NPM_REGISTRY_URL_WITHOUT_PROTOCOL:_password=\${NODE_AUTH_PASSWORD}
          npm config set $NPM_REGISTRY_URL_WITHOUT_PROTOCOL:username=${{ vars.AZDO_NPM_REGISTRY_USERNAME }}

          npm config get
      - env:
          NODE_AUTH_PASSWORD: ${{ secrets.AZDO_NPM_REGISTRY_PASSWORD }}
        run: npm install --global --ignore-scripts semver@latest # Skip scripts to prevent malicious scripts from stealing the token.
      - name: Redirect package-lock.json
        run: |
          cat package-lock.json | jq -r '.packages = (.packages | with_entries(.value = (.value | (if ((.link | not) and .resolved) then (.resolved = "${{ vars.AZDO_NPM_REGISTRY_URL }}" + (.resolved | ltrimstr("https://registry.npmjs.org/"))) else . end))))' > package-lock.json.tmp
          mv package-lock.json.tmp package-lock.json
      - name: Build versions file # This will become source of truth.
        run: |
          BRANCH=`git branch --show-current`

          echo {} > package-versions.json

          for i in `cat package.json | jq -r '.workspaces | join("\n")'`
          do
            COMMITTER_DATE=`git log --date=format:%Y%m%d --pretty=format:'%cd' -1 ./$i/`
            COMMITTER_DATE_IN_ISO8601=`git log --pretty=format:'%cI' -1 ./$i/`
            LONG_COMMITISH=`git log --pretty=format:'%H' -1 ./$i/`
            SHORT_COMMITISH=`git log --pretty=format:'%h' -1 ./$i/`
            SEMVER_SHORT_COMMITISH=`echo $SHORT_COMMITISH | sed 's/^0*//'`
            VERSION=`cat ./$i/package.json | jq -r .version | xargs -L1 npm exec --offline -- semver --increment prerelease -n false --preid $BRANCH.$COMMITTER_DATE.$SEMVER_SHORT_COMMITISH`

            cat ./package-versions.json | jq --arg branch $BRANCH --arg committerDateInISO8601 $COMMITTER_DATE_IN_ISO8601 --arg longCommitish $LONG_COMMITISH --arg shortCommitish $SHORT_COMMITISH --arg path ./$i/ --arg version $VERSION --argfile packageJSON ./$i/package.json -r '. + { ($packageJSON.name): { branch: $branch, committerDate: $committerDateInISO8601, longCommitish: $longCommitish, name: $packageJSON.name, path: $path, private: ($packageJSON.private // false), shortCommitish: $shortCommitish, tarball: ("./" + $packageJSON.name + "-" + $version + ".tgz"), version: $version } }' > ./package-versions.json.tmp && true || exit 1

            mv ./package-versions.json.tmp ./package-versions.json && true || exit 1
          done
      - name: Show versions file
        run: cat package-versions.json
      - # We cannot run "npm version" right after "npx semver". Otherwise, next run of "npx semver" will ignore "-n false".
        # "npm version" will update workspaces. During update, it will need to talk to NPM registry.
        env:
          NODE_AUTH_PASSWORD: ${{ secrets.AZDO_NPM_REGISTRY_PASSWORD }}
        name: Bump versions
        run: cat package-versions.json | jq -cr 'to_entries | map("--workspace=" + .key + " " + .value.version) | join("\n")' | xargs -L1 npm version
      - env:
          NODE_AUTH_PASSWORD: ${{ secrets.AZDO_NPM_REGISTRY_PASSWORD }}
        run: npm clean-install --ignore-scripts # Skip scripts to prevent malicious scripts from stealing the token.
      - name: Build
        run: npm run build --if-present --workspaces=true
      - name: Pack tarballs
        run: npm pack --pack-destination=$PWD --workspaces=true
      - name: 'Sanity check: has packed all tarballs'
        run: |
          for i in `cat package-versions.json | jq -r '.[] | .tarball'`
          do
            compgen -G $i
          done
      - name: Upload versions file
        uses: actions/upload-artifact@v3
        with:
          name: package-versions
          path: ./package-versions.json
      - id: list-packages
        name: Display versions file
        run: cat package-versions.json
      - name: Upload packages artifact
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./*.tgz
      - name: Summary
        run: |
          echo \<details\>\<summary\>Content of \<code\>package-versions.json\</code\>\</summary\> >> $GITHUB_STEP_SUMMARY
          echo >> $GITHUB_STEP_SUMMARY
          echo \`\`\`json >> $GITHUB_STEP_SUMMARY
          cat package-versions.json >> $GITHUB_STEP_SUMMARY
          echo \`\`\` >> $GITHUB_STEP_SUMMARY
          echo \</details\> >> $GITHUB_STEP_SUMMARY

  upload-release-asset:
    name: Upload release asset
    needs:
      - build
    permissions:
      contents: write # "contents" is required for modifying releases.
    runs-on: ubuntu-latest
    steps:
      - name: Download versions file
        uses: actions/download-artifact@v3
        with:
          name: package-versions
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
      - name: List all publishing packages
        run: ls -l ./*.tgz
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Upload packages to GitHub "${{ env.publish-tag }}" release
        run: |
          gh release upload ${{ env.publish-tag }} package-versions.json --repo ${{ github.repository }}
          gh release view ${{ env.publish-tag }} --json assets --repo ${{ github.repository }} > assets.json

          for i in `cat package-versions.json | jq -r 'to_entries | map(.key) | join("\n")'`
          do
            TARBALL=`cat package-versions.json | jq --arg name $i -r '.[$name] | .tarball | ltrimstr("./")'`
            cat package-versions.json | jq --arg name powerva-chat-adapter -r '.[$name] | .tarball | ltrimstr("./")'

            echo - \`$i\` >> $GITHUB_STEP_SUMMARY

            if [[ "`cat assets.json | jq --arg name $TARBALL '.assets | any(select(.name == $name))'`" == "false" ]]
            then
              for j in `cat assets.json | jq -r --arg name $i '.assets | map(select(.name | test($name + "-[0-9]"))) | map(.name) | join("\n")'`
              do
                gh release delete-asset ${{ env.publish-tag }} $j --repo ${{ github.repository }} || true
                echo "   - Deleted \`$j\`" >> $GITHUB_STEP_SUMMARY
              done

              gh release upload ${{ env.publish-tag }} $TARBALL --repo ${{ github.repository }}
              echo "   - Uploaded \`$TARBALL\`" >> $GITHUB_STEP_SUMMARY
            else
              echo "   - Skipped \`$TARBALL\`" >> $GITHUB_STEP_SUMMARY
            fi
          done

  # Update release after re-pushing a new tag.
  update-release:
    name: Update release
    needs:
      - upload-release-asset
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all tags.
      - name: Update tag
        run: |
          git tag -d ${{ env.publish-tag }} || true
          git tag ${{ env.publish-tag }}
          git push origin :${{ env.publish-tag }} || true
          git push origin ${{ env.publish-tag }}
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Update release
        run: gh release edit ${{ env.publish-tag }} --draft=false --prerelease --repo ${{ github.repository }}

  summary:
    name: Summary
    needs:
      - update-release
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo - [Release]\(${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.publish-tag }}\) >> $GITHUB_STEP_SUMMARY
          echo - [Source code \(tagged\)]\(${{ github.server_url }}/${{ github.repository }}/tree/${{ env.publish-tag }}\) >> $GITHUB_STEP_SUMMARY

  pack-pages-artifact:
    name: Pack pages artifact
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
      - name: Extract pages package
        run: |
          mkdir ./_site/
          tar --extract --verbose --file=`ls -1 pages-[0-9]*.tgz` --strip-component=2 --directory=./_site/ package/public
          ls -la ./_site/
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2

  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    name: Deploy pages
    needs:
      - pack-pages-artifact
    permissions:
      id-token: write
      pages: write
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

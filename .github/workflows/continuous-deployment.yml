name: Continuous deployment

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.devcontainer/**'
      - '.github/**'
  workflow_dispatch: {}

env:
  node-version: lts/Hydrogen
  publish-tag: continuous-deployment

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      - id: get-commitish
        name: Get commitish
        run: echo commitish=`git log --pretty=format:'%h' -1 ./$i/` > $GITHUB_OUTPUT
      - run: npm install --global semver@latest
      - name: Append commitish to package version
        run: |
          BRANCH=`git branch --show-current`
          DATE=`date +%Y%m%d`

          echo {} > package-versions.json

          for i in `cat package.json | jq -r '.workspaces | join("\n")'`
          do
            COMMITISH=`git log --pretty=format:'%h' -1 ./$i/`

            cat ./$i/package.json | jq -r .version | xargs -L1 semver $1 --increment prerelease -n false --preid $BRANCH.$DATE.$COMMITISH | xargs -L1 npm version --no-git-tag-version --workspace $i $1

            cat ./package-versions.json | jq --arg branch $BRANCH --arg commitish $COMMITISH --arg path ./$i/ --argfile packageJSON ./$i/package.json -rS '. + { ($packageJSON.name): { branch: $branch, commitish: $commitish, path: $path, tarball: ("./" + $packageJSON.name + "-" + $packageJSON.version + ".tgz"), version: $packageJSON.version } }' > ./package-versions.json.tmp

            mv ./package-versions.json.tmp ./package-versions.json
          done
      - name: Show versions file
        run: cat package-versions.json
      - name: Build
        run: npm run build --if-present --workspaces=true
      - name: Pack tarballs
        run: npm pack --pack-destination=$PWD --workspaces=true
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v3
        with:
          name: package-versions
          path: ./package-versions.json
      - name: List publishing packages
        run: cat package-versions.json | jq --arg commitish ${{ steps.get-commitish.outputs.commitish }} -r '. | select(.commitish == $commitish)'
      - name: Consolidate publishing packages
        # TODO: Fix this, we are uploading everything for first time
        run: |
          mkdir -p ./publishing/

          for i in `cat package-versions.json | jq --arg commitish ${{ steps.get-commitish.outputs.commitish }} -r '.[] | select(.commitish != $commitish) | .tarball'`
          do
            mv $i ./publishing/
          done
      - name: Upload publishing packages artifact
        uses: actions/upload-artifact@v3
        with:
          name: publishing-packages
          path: ./publishing/

  upload-to-release:
    needs:
      - build
    permissions:
      contents: write # "contents" is required for modifying releases.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all tags.
      - name: Download publishing packages artifact
        uses: actions/download-artifact@v3
        with:
          name: publishing-packages
      - name: List all publishing packages
        run: ls -l *.tgz
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Upload packages to GitHub "${{ env.publish-tag }}" release
        run: gh release upload ${{ env.publish-tag }} ./*.tgz --repo ${{ github.repository }}
      - name: Update tag
        run: |
          git tag -d ${{ env.publish-tag }}
          git tag ${{ env.publish-tag }}
          git push origin :${{ env.publish-tag }}
          git push origin ${{ env.publish-tag }}
      - name: Summary
        run: |
          echo Release at https://github.com/${{ github.repository }}/releases/tag/${{ env.publish-tag }}

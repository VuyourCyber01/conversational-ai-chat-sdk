name: 'CD: Release'
run-name: "${{ startsWith(github.ref_name, 'bot/release/production/') && format('Production release: {0}', github.ref_name) || format('Development release: {0}', github.ref_name) }}"

on:
  push:
    branches:
      - bot/release/**
  workflow_dispatch:
    inputs:
      dry-run:
        default: true # TODO: Turn this off.
        description: Dry run
        required: true
        type: boolean
      skip-secure-feed:
        default: true # TODO: Turn this off.
        description: Skip secure feed (only for development)
        required: true
        type: boolean

concurrency: on-push-branch-release

defaults:
  run:
    shell: bash

env:
  node-version: lts/Iron # Node.js 20
  skip-secure-feed: true

# Disable all permissions and explicitly specific in the job.
permissions: {}

jobs:
  prepare:
    name: Prepare
    outputs:
      matrix: ${{ steps.read-matrix.outputs.matrix }}
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Print matrix.json
        run: jq -r '.' ./matrix.json

      - id: read-matrix
        name: Output matrix.json
        run: echo matrix=$(jq -cr '.' ./matrix.json) | tee --append $GITHUB_OUTPUT

  build:
    name: Build
    needs: prepare
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}

      - if: '!env.skip-secure-feed'
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed

      - run: npm clean-install --ignore-scripts --strict-peer-deps # Prevent malicious scripts from running.

      - name: Run whitelisted install scripts
        run: npm run postinstall --if-present --workspaces=true

      - name: Build
        run: npm run build --if-present --workspaces=true

      - name: Pack
        run: |
          mkdir -p .tmp/tarball/

          for entry in $(cat ./matrix.json | jq -cr '.packages[]')
          do
            name=$(echo $entry | jq -r '.name')
            path=$(echo $entry | jq -r '.path')
            expected_tarball=$(echo $entry | jq -r '.tarball')

            echo ::group::$path

            npm pack --json --pack-destination=.tmp/tarball/ --workspace=$name > .tmp/pack-result.json

            # Prints "npm pack" result.
            cat .tmp/pack-result.json | jq 'map(del(.files))'

            # Just in case if the tarball named differently than our matrix.json, rename it.
            actual_tarball=$(cat .tmp/pack-result.json | jq -r '.[0].filename')
            if [[ $actual_tarball != $expected_tarball ]]
            then
              echo ::warning::Expected tarball filename "$expected_tarball" is different than actual filename "$actual_tarball".
              mv .tmp/tarball/$actual_tarball .tmp/tarball/$expected_tarball
            fi

            echo ::endgroup::
          done

          ls -la .tmp/tarball/

      - name: Upload packages artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: packages
          path: .tmp/tarball/

  github-pages-artifact:
    name: 'Build: GitHub Pages'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: matrix.json

      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Make directory
        run: mkdir ./_site/

      - id: pages-tarball
        name: Get tarball filename
        run: echo tarball=$(cat ./matrix.json | jq -r '.packages[] | select(.name == "pages") | .tarball') | tee --append $GITHUB_OUTPUT

      - name: 'Sanity check: tarball exists'
        run: '[[ -f ${{ steps.pages-tarball.outputs.tarball }} ]]'

      - name: Extract ${{ steps.pages-tarball.outputs.tarball }}
        run: tar --directory=./_site/ --extract --file=${{ steps.pages-tarball.outputs.tarball }} --strip-components=2 --verbose package/public

      - name: List directory
        run: ls -la ./_site/

      - name: 'Sanity check: must have index.html'
        run: '[[ -f ./_site/index.html ]]'

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2

  sanity-check:
    name: 'Sanity check: ${{ matrix.name }}'
    needs:
      - build
      - prepare
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix).packages }}
    steps:
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: 'Sanity check: "${{ matrix.tarball }}" must exists'
        run: '[[ -f ./${{ matrix.tarball }} ]]'

      - name: Print package.json
        run: tar --extract --file=${{ matrix.tarball }} --to-stdout package/package.json | jq

      - name: 'Sanity check: tarball "name" field must be "${{ matrix.name }}"'
        run: '[[ $(tar --extract --file=${{ matrix.tarball }} --to-stdout package/package.json | jq -r .name) == "${{ matrix.name }}" ]]'

      - name: 'Sanity check: tarball "version" field must be "${{ matrix.version }}"'
        run: '[[ $(tar --extract --file=${{ matrix.tarball }} --to-stdout package/package.json | jq -r .version) == "${{ matrix.version }}" ]]'

  github-pages-deployment:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      url: ${{ steps.deployment.outputs.page_url }}
    name: 'GitHub Pages: deploy'
    needs:
      - github-pages-artifact
      - sanity-check
    permissions:
      id-token: write
      pages: write
    runs-on: ubuntu-latest
    steps:
      - id: deployment
        if: '!inputs.dry-run'
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2

  # github-release-publish:
  #   env:
  #     tag: release/${{ inputs.name }}/v${{ matrix.production-version }}
  #   environment:
  #     name: github-release
  #     url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.tag }}
  #   name: Create release (${{ matrix.name }}@${{ matrix.production-version }})
  #   needs:
  #     - build
  #     - publish
  #   permissions:
  #     contents: write # Required for creating release
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{ fromJSON(needs.prepare.outputs.matrix).packagesToGitHubRelease }}

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Download tarball artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: tarball
  #         path: .tmp/tarball/

  #     - # We need to use "gh api" to create a tag/ref.
  #       # Otherwise, if last commit was modifying workflow, it will fail with permission issues.
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #       if: '!inputs.dry-run'
  #       name: Push tag
  #       run: gh api repos/${{ github.repository }}/git/refs --field ref=refs/tags/${{ env.tag }} --field sha=${{ github.sha }}

  #     - env:
  #         GH_TOKEN: ${{ github.token }}
  #       if: '!inputs.dry-run'
  #       name: Create release
  #       run: |
  #         date=$(date +%F)

  #         gh release create \
  #           ${{ env.tag }} \
  #           .tmp/tarball/${{ matrix.filename }} \
  #           --notes "> [Workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" \
  #           --title "${{ matrix.name }}@${{ matrix.production-version }} - $date" \
  #           --repo ${{ github.repository }}

  npm-publishing:
    environment:
      name: npm-publish
      # Example: https://npmjs.com/package/powerva-chat-adapter/v/0.0.0-0
      url: https://npmjs.com/package/${{ matrix.name }}/v/${{ matrix.version }}
    # Skip publishing to NPM on forks.
    # TODO: Remove this. We are commenting out for testing.
    # if: github.repository_owner == 'microsoft'
    name: 'NPM: publish ${{ matrix.name }}@${{ matrix.version }}'
    needs:
      - build
      - prepare
      - sanity-check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix).packagesToNPM }}
    steps:
      - uses: actions/checkout@v3
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: .tmp/tarball/
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: List package
        run: ls -l .tmp/tarball/${{ matrix.tarball }}
      - name: Print package.json
        run: tar --extract --file=.tmp/tarball/${{ matrix.tarball }} --to-stdout package/package.json
      - id: has-published
        name: Checks if ${{ matrix.name }}@${{ matrix.version }} is already published
        uses: ./.github/actions/check-if-package-has-published
        with:
          name: ${{ matrix.name }}
          version: ${{ matrix.version }}
      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: '!steps.has-published.outputs.published && !inputs.dry-run'
        name: Publish ${{ matrix.name }}@${{ matrix.version }}
        # TODO: Remove "echo".
        run: echo npm publish --json .tmp/tarball/${{ matrix.tarball }} --provenance

  delete-branch:
    environment: admin
    if: github.event_name != 'workflow_dispatch'
    name: Delete branch
    needs:
      - github-pages-deployment
      # - github-release-publish
      - npm-publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.SSH_DEPLOY_KEY }}
      - name: Delete branch
        run: git push -d origin ${{ github.ref_name }}

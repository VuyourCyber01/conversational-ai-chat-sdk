name: Pull request validation

on:
  pull_request:
    branches:
      - main
  workflow_dispatch: {} # Run on-demand for testing workflow functionality.

jobs:
  root-package-sanity-check:
    name: Root package sanity check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: 'Sanity check: package path must match their package name'
        run: |
          for i in `cat package.json | jq -r '.workspaces | join("\n")'`
          do
            cat $i/package.json | jq --arg packagePath "$i" -r '.name == ($packagePath | ltrimstr("packages/")) | if . then empty else halt_error(1) end'
          done
      - name: 'Sanity check: package.json/workspaces must match folders under /packages'
        run: cat package.json | jq --args -r '.workspaces | sort == ($ARGS.positional | map("packages/" + .) | sort) | if . then empty else halt_error(1) end' `ls ./packages/ -1`

  build:
    name: Build
    needs:
      - root-package-sanity-check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version:
          - lts/Hydrogen
        os:
          - ubuntu-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm clean-install --strict-peer-deps
      - name: Run static code analysis
        run: npm run precommit --workspaces=true
      - name: Build
        run: npm run build --if-present --workspaces=true
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        name: Pack tarballs
        run: npm pack --pack-destination=$PWD --workspaces=true
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        name: Generate package names list
        run: |
          for i in `ls -1 ./*.tgz`
          do
            tar --extract --file=$i --to-stdout package/package.json | jq -r '.name' >> package-names.txt
          done
          cat package-names.txt | jq -Rs '. | rtrimstr("\n") | split("\n")' > package-names.json
          cat package-names.json
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        name: Upload tarball artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: tarball
          path: |
            ./*.tgz
            ./package-names.json

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        node-version:
          - lts/Hydrogen
        package-name:
          - powerva-chat-adapter
          - powerva-turn-based-chat-adapter-framework
        os:
          - ubuntu-latest
          - windows-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: tarball
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
      - run: npm clean-install --ignore-scripts
      - name: Extract tarballs
        run: |
          for i in `ls -1 ./*.tgz`
          do
            tar --extract --file=$i --directory=./packages/`tar --extract --to-stdout --file=$i package/package.json | jq -r '.name'` --strip-components=1 --verbose
          done
        shell: bash
      - name: Run tests
        run: |
          cd packages/${{ matrix.package-name }}
          npm test --workspaces=true
        shell: bash

  per-package-sanity-check:
    name: Per-package sanity check
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-name:
          - powerva-chat-adapter
          - powerva-turn-based-chat-adapter-framework

    steps:
      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: tarball
      - name: Extract tarball to root
        run: tar --extract --file=`ls -1 ./${{ matrix.package-name }}-*.tgz` --strip-components=1 --verbose
      - name: 'Sanity check: has LICENSE'
        run: compgen -G LICENSE
      - name: 'Sanity check: has README.md'
        run: compgen -G README.md
      - name: 'Sanity check: at least one exports'
        run: cat package.json | jq '.exports | to_entries | if length == 0 then halt_error(1) else empty end'
      - name: 'Sanity check: all exports exists'
        run: cat package.json | jq '.exports | map(flatten) | flatten | .[]' | xargs -L1 test -f $1
      - name: 'Sanity check: all exports has "types" condition'
        run: cat package.json | jq '.exports | map(select(.types == null)) | if length > 0 then halt_error(1) else empty end'
      - name: 'Sanity check: has source maps'
        run: compgen -G lib/**/*.js.map
      - name: 'Sanity check: no lib/**/*.spec.*'
        run: '! compgen -G lib/**/*.spec.*'
      - name: 'Sanity check: no lib/**/*.test.*'
        run: '! compgen -G lib/**/*.test.*'
      - name: 'Sanity check: no production dependencies are pre-release except local peers'
        run: cat package.json | jq --argfile packageNames package-names.json '.dependencies + ($packageNames | with_entries(.key = .value | .value = "")) | to_entries | .[] | select(.value | contains("-")) | if length > 0 then halt_error(1) else empty end'
      - name: 'Sanity check: must from https://registry.npmjs.org/'
        run: cat package-lock.json | jq '.dependencies + .packages | to_entries | map(.value.resolved // "" | select((. == "" or startswith("https://registry.npmjs.org/")) | not)) | if length > 0 then halt_error(1) else empty end'
      - name: 'Sanity check: version must be prerelease'
        run: cat package.json | jq '.version | contains("-") | if . then empty else halt_error(1) end'
      # TODO: Must contains changes in CHANGELOG.md
      # TODO: In CHANGELOG.md, if breaking changes is modified, must bump major
      # TODO: In CHANGELOG.md, if features are removed, must bump major
      # TODO: In CHANGELOG.md, if features are added, must bump minor
      # TODO: In CHANGELOG.md, if bugs are fixed, must bump patch

# TODO: Fix this name
name: Continuous deployment (matrix as workflow state)
run-name: "${{ github.event_name != 'push' && format('Continuous deployment: {0} on {1}', github.event_name, github.ref_name) || null }}"

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.azdo/**'
      - '.devcontainer/**'
      - '.github/**'
  workflow_dispatch:
    inputs:
      skip-secure-feed:
        # TODO: Turn this off.
        default: true
        description: Skip secure feed (only for development)
        required: true
        type: boolean

# Do not cancel current run. This is because we are using ${{ github.sha }} to determine what to publish.
# If current run is cancelled, we will not publish packages for the current run.
# TODO: Fix this name
concurrency: continuous-deployment2

defaults:
  run:
    shell: bash

env:
  node-version: lts/Hydrogen
  publish-tag: release/vnext

jobs:
  prepare:
    name: Prepare
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - if: ${{ !inputs.skip-secure-feed }}
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed
      - run: npm install --global --ignore-scripts semver@latest # Ignore scripts to prevent malicious scripts.
      # We intentionally checkout after enable secure feed.
      # This will speed up secure feed setup significantly as it don't need to patch package-lock.json.
      # But we also need to be super careful we don't run any NPM commands that would fetch the registry. We are insecure here.
      - uses: actions/checkout@v3
      - id: build-matrix
        name: Build matrix
        run: |
          # branch=main
          branch=$(git branch --show-current)

          # The short commitish is at the root because the package can be influenced by /package-lock.json too.
          # short_commitish=0bf2b81
          short_commitish=$(git log --pretty=format:'%h' -1)

          mkdir .tmp/
          echo [] > .tmp/matrix.json

          for package_path in $(jq -r '.workspaces | join("\n")' ./package.json)
          do
            # committer_date=20230815-110805
            committer_date=$(git log --date=format:%Y%m%d-%H%M%S --pretty=format:'%cd' -1 ./$package_path/)

            # version=main.20230815-110805.0bf2b81
            # This version is not very accurate, after running `npm version`, it will remove leading zeroes in prerelease tags if that certain part is all numeric. This does not repro in semver.
            # "main.20230815-110805.0bf2b81" -> "main.20230815-110805.0bf2b81"
            # "main.20230815-110805.0012345" -> "main.20230815-110805.12345"
            # We will update the matrix again in build job.
            current_version=$(jq -r '.version' ./$package_path/package.json)

            version=$(npm exec --offline -- semver --increment prerelease -n false --preid $branch.$committer_date.$short_commitish $current_version)

            jq --arg path "$package_path" --arg version "$version" --argfile packageJSON ./$package_path/package.json -r '. + [{ name: $packageJSON.name, path: $path, private: ($packageJSON.private // false), version: $version }]' .tmp/matrix.json > .tmp/matrix.json.tmp

            mv .tmp/matrix.json.tmp .tmp/matrix.json
          done
      - name: Print matrix
        run: cat .tmp/matrix.json
      - name: 'Sanity check: matrix list all workspaces'
        run: cat .tmp/matrix.json | jq --argfile packageJSON ./package.json 'if (. | map(.path)) == ($packageJSON.workspaces) then empty else halt_error(1) end'
      - name: 'Sanity check: all entries must have "name" field'
        run: cat .tmp/matrix.json | jq 'if map(select(.name | not)) | length == 0 then empty else halt_error(1) end'
      - name: 'Sanity check: all entries must have "path" field'
        run: cat .tmp/matrix.json | jq 'if map(select(.path | not)) | length == 0 then empty else halt_error(1) end'
      - name: 'Sanity check: all entries must have "version" field'
        run: cat .tmp/matrix.json | jq 'if map(select(.version | not)) | length == 0 then empty else halt_error(1) end'
      - name: 'Sanity check: at least one entry marked as non-private'
        run: cat .tmp/matrix.json | jq 'if map(select(.private | not)) | length > 0 then empty else halt_error(1) end'
      - id: set-outputs
        name: Set outputs
        run: echo matrix=$(jq -cr '.' .tmp/matrix.json) | tee --append $GITHUB_OUTPUT

  build:
    name: Build (${{ matrix.rescope && format('scoped as @{0}', github.repository_owner) || 'as-is' }})
    needs: prepare
    outputs:
      # filenames: ['package-a-1.2.3-0.tgz', 'package-b-7.8.9-0.tgz']
      filenames: ${{ !matrix.rescope && steps.set-outputs.outputs.filenames || null }}
      # scoped-filenames: ['compulim-package-a-1.2.3-0.tgz', 'compulim-package-b-7.8.9-0.tgz']
      scoped-filenames: ${{ matrix.rescope && steps.set-outputs.outputs.filenames || null }}
      # scoped-names: ['@compulim/package-a', '@compulim/package-b']
      scoped-names: ${{ matrix.rescope && steps.set-outputs.outputs.names || null }}
      # versions: ['1.2.3-0', '7.8.9-0']
      versions: ${{ !matrix.rescope && steps.set-outputs.outputs.versions || null }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # We are rescoping packages so they can publish to contributor's GitHub Packages so they can consume it easily.
        rescope: [false, true]
    steps:
      - uses: actions/checkout@v3
      - env:
          matrix: ${{ needs.prepare.outputs.matrix }}
        name: Save matrix
        run: |
          mkdir .tmp/
          echo $matrix | jq -r | tee .tmp/matrix.json
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      - if: ${{ !inputs.skip-secure-feed }}
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed
      - # We cannot run "npm version" right after "npx semver". Otherwise, next run of "npx semver" will ignore "-n false".
        # "npm version" will update workspaces. During update, it will need to talk to NPM registry.
        name: Bump versions
        run: |
          cat .tmp/matrix.json

          for entry in $(cat .tmp/matrix.json | jq -cr '.[]')
          do
            name=$(echo $entry | jq -r .name)
            version=$(echo $entry | jq -r .version)

            echo $name@$version

            npm version --no-git-tag-version --workspace=$name $version
          done
      - if: ${{ matrix.rescope }}
        name: Rescope packages to @${{ github.repository_owner }}
        run: |
          mkdir .tmp/

          for path in $(cat ./package.json | jq -r '.workspaces | join("\n")')
          do
            echo ::group::$path/package.json

            cat $path/package.json | jq --arg owner "${{ github.repository_owner }}" --argfile matrix .tmp/matrix.json -r 'def rescope($entry): $entry | if ($matrix | map(select(.name == $entry.key)) | length > 0) then .value = "npm:@" + $owner + "/" + .key + "@" + .value else . end; . | (.name = "@" + $owner + "/" + .name) | (.dependencies |= (. | with_entries(rescope(.)))) | (.devDependencies |= (. | with_entries(rescope(.))))' | tee .tmp/package.json

            mv .tmp/package.json $path/package.json

            echo ::endgroup::
          done
      - if: ${{ matrix.rescope }}
        name: Rescope package-lock.json
        run: |
          # We only know how to deal with lockfile v3.
          cat ./package-lock.json | jq 'if .lockfileVersion == 3 then empty else empty | halt_error(1) end'

          for path in $(cat ./package.json | jq -r '.workspaces | join("\n")')
          do
            echo ::group::$path/package.json

            cat ./package-lock.json | jq --arg path "$path" --argfile package $path/package.json -r '.packages[$path] += { dependencies: $package.dependencies, devDependencies: $package.devDependencies, name: $package.name, optionalDependencies: ($package.optionalDependencies // {}), peerDependencies: ($package.peerDependencies // {}) }' > .tmp/package-lock.json.tmp

            mv .tmp/package-lock.json.tmp ./package-lock.json

            cat ./package-lock.json | jq --arg path "$path" --argfile package $path/package.json -r '.packages |= with_entries(if .value.resolved == $path then .key = "node_modules/" + $package.name else . end)' > .tmp/package-lock.json.tmp

            mv .tmp/package-lock.json.tmp ./package-lock.json

            cat ./package-lock.json | jq --arg path "$path" -r '.packages | with_entries(select(.key == $path // .value.resolved == $path))'

            echo ::endgroup::
          done
      - run: npm clean-install --ignore-scripts --strict-peer-deps # Prevent malicious scripts from running.
      - name: Run whitelisted install scripts
        run: npm run postinstall --if-present --workspaces=true
      - name: Build
        run: npm run build --if-present --workspaces=true
      - name: Pack
        run: |
          mkdir -p .tmp/tarball/

          for path in $(cat ./package.json | jq -r '.workspaces | .[]')
          do
            echo ::group::$path

            name=$(cat $path/package.json | jq -r .name)

            npm pack --json --pack-destination=.tmp/tarball/ --workspace=$name > .tmp/pack-result.json

            cat .tmp/pack-result.json | jq 'map(del(.files))'

            cat .tmp/pack-result.json | jq -r '.[0].filename' | tee --append .tmp/filenames.txt
            cat .tmp/pack-result.json | jq -r '.[0].name' | tee --append .tmp/names.txt
            cat .tmp/pack-result.json | jq -r '.[0].version' | tee --append .tmp/versions.txt

            echo ::endgroup::
          done
      - id: set-outputs
        name: Set outputs
        run: |
          cat .tmp/filenames.txt
          echo filenames=$(cat .tmp/filenames.txt | jq -cnR 'reduce inputs as $i ([]; . + [$i])') | tee --append $GITHUB_OUTPUT

          cat .tmp/names.txt
          echo names=$(cat .tmp/names.txt | jq -cnR 'reduce inputs as $i ([]; . + [$i])') | tee --append $GITHUB_OUTPUT

          cat .tmp/versions.txt
          echo versions=$(cat .tmp/versions.txt | jq -cnR 'reduce inputs as $i ([]; . + [$i])') | tee --append $GITHUB_OUTPUT
      - if: ${{ !matrix.rescope }}
        name: Upload package-lock.json
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: package-lock
          path: ./package-lock.json
      - name: Upload packages artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ matrix.rescope && 'scoped-packages' || 'packages' }}
          path: .tmp/tarball/

  build-merge-matrix:
    name: 'Build: Merge matrix'
    needs:
      - build
      - prepare
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - env:
          matrix: ${{ needs.prepare.outputs.matrix }}
        name: Save matrix
        run: |
          mkdir .tmp/
          echo $matrix | jq -r | tee .tmp/matrix.json
      - env:
          filenames: ${{ needs.build.outputs.filenames }}
        name: Add filename to matrix
        run: |
          echo $filenames | jq -r | tee .tmp/filenames.json

          cat .tmp/matrix.json | jq --argfile filenames .tmp/filenames.json -r 'to_entries | map(.value + { filename: $filenames[.key] })' | tee .tmp/matrix.json.tmp

          mv .tmp/matrix.json.tmp .tmp/matrix.json
      - env:
          scoped_filenames: ${{ needs.build.outputs.scoped-filenames }}
        name: Add scoped filenames to matrix
        run: |
          echo $scoped_filenames | jq -r | tee .tmp/scoped-filenames.json

          cat .tmp/matrix.json | jq --argfile scopedFilenames .tmp/scoped-filenames.json -r 'to_entries | map(.value + { "scoped-filename": $scopedFilenames[.key] })' | tee .tmp/matrix.json.tmp

          mv .tmp/matrix.json.tmp .tmp/matrix.json
      - env:
          scoped_names: ${{ needs.build.outputs.scoped-names }}
        name: Add scoped names to matrix
        run: |
          echo $scoped_names | jq -r | tee .tmp/scoped-names.json

          cat .tmp/matrix.json | jq --argfile scopedNames .tmp/scoped-names.json -r 'to_entries | map(.value + { "scoped-name": $scopedNames[.key] })' | tee .tmp/matrix.json.tmp

          mv .tmp/matrix.json.tmp .tmp/matrix.json
      - env:
          versions: ${{ needs.build.outputs.versions }}
        name: Add versions to matrix
        run: |
          echo $versions | jq -r | tee .tmp/versions.json

          cat .tmp/matrix.json | jq --argfile versions .tmp/versions.json -r 'to_entries | map(.value + { version: $versions[.key] })' | tee .tmp/matrix.json.tmp

          mv .tmp/matrix.json.tmp .tmp/matrix.json
      - name: Print updated matrix
        run: cat .tmp/matrix.json
      - env:
          matrix: ${{ needs.prepare.outputs.matrix }}
        name: 'Sanity check: updated matrix must have same number of items'
        run: cat .tmp/matrix.json | jq --argjson matrix $matrix 'if (. | length) == ($matrix | length) then empty else halt_error(1) end'
      - name: 'Sanity check: matrix must have "filename" field'
        run: cat .tmp/matrix.json | jq 'if (.[] | select(.filename | not) | length > 0) then halt_error(1) else empty end'
      - name: 'Sanity check: matrix must have "scoped-filename" field'
        run: cat .tmp/matrix.json | jq 'if (.[] | select(.["scoped-filename"] | not) | length > 0) then halt_error(1) else empty end'
      - name: 'Sanity check: matrix must have "version" field'
        run: cat .tmp/matrix.json | jq 'if (.[] | select(.version | not) | length > 0) then halt_error(1) else empty end'
      - id: set-outputs
        name: Set outputs
        run: echo matrix=$(cat .tmp/matrix.json | jq -cr) | tee --append $GITHUB_OUTPUT

  prepare-github-pages:
    name: 'Prepare: GitHub Pages'
    needs:
      - build-merge-matrix
    runs-on: ubuntu-latest
    steps:
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
      - env:
          matrix: ${{ needs.build-merge-matrix.outputs.matrix }}
        id: get-tarball-name
        name: Get tarball name
        run: echo filename=$(echo $matrix | jq -r '.[] | select(.name == "pages") | .filename | if . then . else halt_error(1) end') | tee --append $GITHUB_OUTPUT
      - name: Make directory
        run: mkdir ./_site/
      - name: Extract ${{ steps.get-tarball-name.outputs.filename }}
        run: tar --directory=./_site/ --extract --file=$(ls -1 ${{ steps.get-tarball-name.outputs.filename }}) --strip-components=2 --verbose package/public
      - name: List directory
        run: ls -la ./_site/
      - name: 'Sanity check: must have index.html'
        run: '[[ -f ./_site/index.html ]]'
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2

  approval:
    name: Approval
    needs:
      - build-merge-matrix
      - prepare-github-pages
    outputs:
      matrix: ${{ steps.set-outputs.outputs.matrix }}
      public-only-matrix: ${{ steps.set-outputs.outputs.public-only-matrix }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - env:
          matrix: ${{ needs.build-merge-matrix.outputs.matrix }}
        name: Save matrix
        run: |
          mkdir .tmp/
          echo $matrix | jq -r | tee .tmp/matrix.json
      - env:
          matrix: ${{ needs.build-merge-matrix.outputs.matrix }}
        name: Save public-only matrix
        run: cat .tmp/matrix.json | jq -r 'map(select(.private | not))' | tee .tmp/public-only-matrix.json
      - id: set-outputs
        name: Set outputs
        run: |
          echo matrix=$(cat .tmp/matrix.json | jq -cr) | tee --append $GITHUB_OUTPUT
          echo public-only-matrix=$(cat .tmp/public-only-matrix.json | jq -cr) | tee --append $GITHUB_OUTPUT
      - name: Print approved matrix
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: .tmp/matrix.json
          title: Approved matrix
          type: json
      - name: Print approved public-only matrix
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: .tmp/public-only-matrix.json
          title: Approved public-only matrix
          type: json

  github-pages-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      url: ${{ steps.deployment.outputs.page_url }}
    name: 'GitHub Pages: Deploy'
    needs: approval
    permissions:
      id-token: write
      pages: write
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  github-packages-publish:
    environment:
      name: github-packages
      # https://github.com/microsoft/conversational-ai-chat-sdk/pkgs/npm/powerva-chat-adapter
      url: ${{ github.server_url }}/${{ github.repository }}/pkgs/npm/${{ matrix.name }}
    name: 'GitHub Packages: Publish (${{ matrix.scoped-name }}@${{ matrix.version }})'
    needs: approval
    permissions:
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.approval.outputs.public-only-matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: scoped-packages
          path: .tmp/tarball/
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          registry-url: https://npm.pkg.github.com/
      - name: List package
        run: ls -l .tmp/tarball/${{ matrix.scoped-filename }}
      - name: Print package.json
        run: tar -xf .tmp/tarball/${{ matrix.scoped-filename }} --to-stdout package/package.json
      - id: has-published
        name: Checks if ${{ matrix.name }}@${{ matrix.version }} is already published
        uses: ./.github/actions/check-if-package-has-published
        with:
          name: ${{ matrix.name }}
          registry-url: https://npm.pkg.github.com/
          token: ${{ github.token }}
          version: ${{ matrix.version }}
      - env:
          NODE_AUTH_TOKEN: ${{ github.token }}
        if: ${{ steps.has-published.outputs.published == 'false' }}
        name: Publish ${{ matrix.name }}@${{ matrix.version }}
        run: npm publish --json .tmp/tarball/${{ matrix.scoped-filename }}

  npm-publish:
    environment:
      name: npm-publish
      # https://npmjs.com/packages/powerva-chat-adapter/v/0.0.0-0
      url: https://npmjs.com/packages/${{ matrix.name }}/v/${{ matrix.version }}
    # Skip publishing to NPM on forks.
    if: ${{ github.repository_owner == 'microsoft' }}
    name: 'NPM: Publish (${{ matrix.name }}@${{ matrix.version }})'
    needs: approval
    permissions:
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.approval.outputs.public-only-matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: .tmp/tarball/
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - name: List package
        run: ls -l .tmp/tarball/${{ matrix.filename }}
      - name: Print package.json
        run: tar -xf .tmp/tarball/${{ matrix.filename }} --to-stdout package/package.json
      - id: has-published
        name: Checks if ${{ matrix.name }}@${{ matrix.version }} is already published
        uses: ./.github/actions/check-if-package-has-published
        with:
          name: ${{ matrix.name }}
          version: ${{ matrix.version }}
      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: ${{ steps.has-published.outputs.published == 'false' }}
        name: Publish ${{ matrix.name }}@${{ matrix.version }}
        run: npm publish --json .tmp/tarball/${{ matrix.filename }}

  summary:
    if: ${{ always() }}
    name: Summary
    needs:
      - github-packages-publish
      - github-pages-deploy
      - npm-publish
    runs-on: ubuntu-latest
    steps:
      - name: Post deployment
        run: |
          echo - [GitHub Packages]\(${{ github.server_url }}/${{ github.repository_owner }}?tab=packages\&repo_name=${{ github.event.repository.name }}\) >> $GITHUB_STEP_SUMMARY
          echo - [GitHub Pages]\(${{ needs.github-pages-deploy.outputs.url }}\) >> $GITHUB_STEP_SUMMARY
          # echo - [Release]\(${{ needs.release-publish.outputs.url }}\) >> $GITHUB_STEP_SUMMARY
          # echo - [Source code \(tagged\)]\(${{ needs.release-publish.outputs.tag-url }}\) >> $GITHUB_STEP_SUMMARY

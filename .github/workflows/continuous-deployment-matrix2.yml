name: Continuous deployment (matrix as workflow state)
run-name: "${{ github.event_name != 'push' && format('Continuous deployment: {0} on {1}', github.event_name, github.ref_name) || null }}"

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.azdo/**'
      - '.devcontainer/**'
      - '.github/**'
  workflow_dispatch:
    inputs:
      # TODO: Find a way to set it to true for "push".
      use-secure-feed:
        default: true
        description: Use secure feed (required for production)
        required: true
        type: boolean

# Do not cancel current run. This is because we are using ${{ github.sha }} to determine what to publish.
# If current run is cancelled, we will not publish packages for the current run.
# TODO: Fix this name
concurrency: continuous-deployment2

env:
  node-version: lts/Hydrogen
  publish-tag: release/vnext

jobs:
  prepare:
    name: Prepare
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
      - if: ${{ inputs.use-secure-feed }}
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed
        shell: bash
      - run: npm install --global --ignore-scripts semver@latest # Ignore scripts to prevent malicious scripts.

      # We intentionally checkout after enable secure feed.
      # This will speed up secure feed setup significantly.
      # But we also need to be super careful we don't run any NPM commands that would fetch the registry. We are insecure here.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Infinite depth required for commitish
      - id: build-matrix
        name: Build matrix
        run: |
          branch=`git branch --show-current` && true || exit 1

          echo [] > /tmp/matrix.json

          for package_path in `cat ./package.json | jq -r '.workspaces | join("\n")'`
          do
            # committer_date=20230815-110805
            committer_date=`git log --date=format:%Y%m%d-%H%M%S --pretty=format:'%cd' -1 ./$package_path/` && true || exit 1

            # short_commitish=0bf2b81
            short_commitish=`git log --pretty=format:'%h' -1 ./$package_path/` && true || exit 1

            # version=main.20230815-110805.0bf2b81
            # This version is not very accurate, after running `npm version`, it will remove leading zeroes in prerelease tags if that certain part is all numeric. This does not repro in semver.
            # "main.20230815-110805.0bf2b81" -> "main.20230815-110805.0bf2b81"
            # "main.20230815-110805.0012345" -> "main.20230815-110805.12345"
            # We will update the matrix again in build job.
            version=`cat ./$package_path/package.json | jq -r .version | xargs -L1 npm exec --offline -- semver --increment prerelease -n false --preid $branch.$committer_date.$short_commitish` && true || exit 1

            cat /tmp/matrix.json | jq --arg path ./$package_path/ --arg version $version --argfile packageJSON ./$package_path/package.json -r '. + [{ name: $packageJSON.name, path: $path, private: ($packageJSON.private // false), version: $version }]' > /tmp/matrix.json.tmp && true || exit 1
            mv /tmp/matrix.json.tmp /tmp/matrix.json.tmp && true || exit 1
          done
      - id: write-outputs
        name: Write to outputs
        run: echo matrix=`cat /tmp/matrix.json | jq -cr` | tee --append $GITHUB_OUTPUT
      - name: Print matrix
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: ./matrix.json
          title: Matrix
          type: json

  build:
    env:
      matrix: ${{ needs.prepare.outputs.matrix }}
    name: Build (${{ matrix.scoped && 'scoped' || 'unscoped' }})
    needs: prepare
    outputs:
      matrix: ${{ steps.write-outputs.outputs.matrix }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # We are rescoping packages so they can publish to contributor's GitHub Packages so they can consume it easily.
        scoped: [true, false]
    steps:
      - name: Save matrix to file
        run: |
          echo << EOL | tee /tmp/matrix.json
          ${{ needs.prepare.outputs.matrix }}
          EOL

          cat /tmp/matrix.json
      - uses: actions/checkout@v3
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      - if: ${{ inputs.use-secure-feed }}
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed
        shell: bash
      - # We cannot run "npm version" right after "npx semver". Otherwise, next run of "npx semver" will ignore "-n false".
        # "npm version" will update workspaces. During update, it will need to talk to NPM registry.
        name: Bump versions
        run: echo $matrix | jq -cr 'map("--workspace=" + .name + " " + .version) | join("\n")' | xargs -L1 npm version
      - run: npm clean-install --ignore-scripts --strict-peer-deps # CyberEO: Ignore scripts to prevent malicious scripts from stealing the token.
      - # We are cheating, we did not rescope package-lock.json, so we cannot run before npm clean-install.
        # TODO: Rescope package-lock.json
        if: ${{ matrix.scoped }}
        name: Rescope to @${{ github.repository_owner }}
        run: |
          for i in `cat package.json | jq -r '.workspaces | join("\n")'`
          do
            echo ::group::$i/package.json

            cat $i/package.json | jq --arg owner ${{ github.repository_owner }} --argjson matrix $matrix -r 'def rescope($entry): $entry | if ($matrix | map(select(.name == $entry.key)) | length > 0) then .value = "npm:@" + $owner + "/" + .key + "@" + .value else . end; . | (.name = "@" + $owner + "/" + .name) | (.dependencies |= (. | with_entries(rescope(.)))) | (.devDependencies |= (. | with_entries(rescope(.))))' | tee /tmp/package.json && true || exit 1

            mv /tmp/package.json $i/package.json && true || exit 1

            echo ::endgroup::
          done
      - name: Run whitelisted postinstall scripts
        run: npm run postinstall --workspaces=true
      - name: Build
        run: npm run build --if-present --workspaces=true
      - name: Pack tarballs
        run: npm pack --json --pack-destination=$PWD --workspaces=true | tee /tmp/pack-result.json
      - id: update-matrix
        if: ${{ !matrix.scoped }}
        name: Update matrix with tarball and version (unscoped only)
        run: |
          echo $matrix | jq --argfile pack /tmp/pack-result.json -rS 'map(.name as $name | ($pack | .[] | select(.name == $name)) // {} as $packageResult | . + { tarball: $packageResult.filename, version: $packageResult.version })' | tee /tmp/matrix.json && true || exit 1
      - if: ${{ !matrix.scoped }}
        name: 'Sanity check: Updated matrix should have same number of items'
        run: cat /tmp/matrix.json | jq --argjson matrix $matrix 'if (. | length) == ($matrix | length) then empty else halt_error(1) end'
      - if: ${{ !matrix.scoped }}
        name: 'Sanity check: Updated matrix should have tarball'
        run: cat /tmp/matrix.json | jq 'if (.[] | select(.tarball | not) | length > 0) then halt_error(1) else empty end'
      - if: ${{ !matrix.scoped }}
        name: 'Sanity check: Updated matrix should have version'
        run: cat /tmp/matrix.json | jq 'if (.[] | select(.version | not) | length > 0) then halt_error(1) else empty end'
      - id: write-outputs
        if: ${{ !matrix.scoped }}
        name: Write to outputs
        run: echo matrix=`cat /tmp/matrix.json | jq -cr` | tee --append $GITHUB_OUTPUT
      - if: ${{ !matrix.scoped }}
        name: Print updated matrix
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: /tmp/matrix.json
          title: Updated matrix
          type: json
      - name: Upload package-lock.json
        uses: actions/upload-artifact@v3
        with:
          name: package-lock
          path: ./package-lock.json
      - name: Upload packages artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.scoped && 'scoped-packages' || 'packages' }}
          path: ./*.tgz

  build-github-pages:
    env:
      matrix: ${{ needs.build.outputs.matrix }}
    name: 'Build: GitHub Pages'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
      - id: get-tarball-name
        name: Get tarball name
        run: |
          TARBALL=`echo $matrix | jq -r '.[] | select(.name == "pages") | .tarball | if . then . else halt_error(1) end'` && true || exit 1

          echo tarball=$TARBALL | tee --append $GITHUB_OUTPUT
      - name: Make directory
        run: mkdir ./_site/
      - name: Extract ${{ steps.get-tarball-name.outputs.tarball }}
        run: tar --directory=./_site/ --extract --file=`ls -1 ${{ steps.get-tarball-name.outputs.tarball }}` --strip-component=2 --verbose package/public
      - name: List directory
        run: ls -la ./_site/
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2
